type token =
  | AMPERAMPER
  | AMPERSAND
  | AND
  | AS
  | ASSERT
  | BACKQUOTE
  | BANG
  | BAR
  | BARBAR
  | BARRBRACKET
  | BEGIN
  | CHAR of (char)
  | CLASS
  | COLON
  | COLONCOLON
  | COLONEQUAL
  | COLONGREATER
  | COMMA
  | CONSTRAINT
  | DO
  | DONE
  | DOT
  | DOTDOT
  | DOWNTO
  | ELSE
  | END
  | EOF
  | EQUAL
  | EXCEPTION
  | EXTERNAL
  | FALSE
  | FLOAT of (string)
  | FOR
  | FUN
  | FUNCTION
  | FUNCTOR
  | GREATER
  | GREATERRBRACE
  | GREATERRBRACKET
  | IF
  | IN
  | INCLUDE
  | INFIXOP0 of (string)
  | INFIXOP1 of (string)
  | INFIXOP2 of (string)
  | INFIXOP3 of (string)
  | INFIXOP4 of (string)
  | INHERIT
  | INITIALIZER
  | INT of (int)
  | INT32 of (int32)
  | INT64 of (int64)
  | LABEL of (string)
  | LAZY
  | LBRACE
  | LBRACELESS
  | LBRACKET
  | LBRACKETBAR
  | LBRACKETLESS
  | LBRACKETGREATER
  | LBRACKETPERCENT
  | LBRACKETPERCENTPERCENT
  | LESS
  | LESSMINUS
  | LET
  | LIDENT of (string)
  | LPAREN
  | LBRACKETAT
  | LBRACKETATAT
  | LBRACKETATATAT
  | MATCH
  | METHOD
  | MINUS
  | MINUSDOT
  | MINUSGREATER
  | MODULE
  | MUTABLE
  | NATIVEINT of (nativeint)
  | NEW
  | OBJECT
  | OF
  | OPEN
  | OPTLABEL of (string)
  | OR
  | PERCENT
  | PLUS
  | PLUSDOT
  | PLUSEQ
  | PREFIXOP of (string)
  | PRIVATE
  | QUESTION
  | QUOTE
  | RBRACE
  | RBRACKET
  | REC
  | RPAREN
  | SEMI
  | SEMISEMI
  | SHARP
  | SIG
  | STAR
  | STRING of (string * string option)
  | STRUCT
  | THEN
  | TILDE
  | TO
  | TRUE
  | TRY
  | TYPE
  | UIDENT of (string)
  | UNDERSCORE
  | VAL
  | VIRTUAL
  | WHEN
  | WHILE
  | WITH
  | COMMENT of (string * Location.t)
  | EOL

open Parsing;;
let _ = parse_error;;
# 16 "minParser.mly"
open Location
open Asttypes
open Longident
open Parsetree
open Ast_helper

let mktyp d = Typ.mk ~loc:(symbol_rloc()) d
let mkpat d = Pat.mk ~loc:(symbol_rloc()) d
let mkexp d = Exp.mk ~loc:(symbol_rloc()) d
let mkstr d = Str.mk ~loc:(symbol_rloc()) d

let mkrhs rhs pos = mkloc rhs (rhs_loc pos)

let reloc_pat x = { x with ppat_loc = symbol_rloc () };;
let reloc_exp x = { x with pexp_loc = symbol_rloc () };;

let mkoperator name pos =
  let loc = rhs_loc pos in
  Exp.mk ~loc (Pexp_ident(mkloc (Lident name) loc))

let mkpatvar name pos =
  Pat.mk ~loc:(rhs_loc pos) (Ppat_var (mkrhs name pos))

(*
  Ghost expressions and patterns:
  expressions and patterns that do not appear explicitly in the
  source file they have the loc_ghost flag set to true.
  Then the profiler will not try to instrument them and the
  -annot option will not try to display their type.

  Every grammar rule that generates an element with a location must
  make at most one non-ghost element, the topmost one.

  How to tell whether your location must be ghost:
  A location corresponds to a range of characters in the source file.
  If the location contains a piece of code that is syntactically
  valid (according to the documentation), and corresponds to the
  AST node, then the location must be real; in all other cases,
  it must be ghost.
*)
let ghexp d = Exp.mk ~loc:(symbol_gloc ()) d
let ghloc d = { txt = d; loc = symbol_gloc () }

let mkinfix arg1 name arg2 =
  mkexp(Pexp_apply(mkoperator name 2, ["", arg1; "", arg2]))

let neg_float_string f =
  if String.length f > 0 && f.[0] = '-'
  then String.sub f 1 (String.length f - 1)
  else "-" ^ f

let mkuminus name arg =
  match name, arg.pexp_desc with
  | "-", Pexp_constant(Const_int n) ->
      mkexp(Pexp_constant(Const_int(-n)))
  | "-", Pexp_constant(Const_int32 n) ->
      mkexp(Pexp_constant(Const_int32(Int32.neg n)))
  | "-", Pexp_constant(Const_int64 n) ->
      mkexp(Pexp_constant(Const_int64(Int64.neg n)))
  | "-", Pexp_constant(Const_nativeint n) ->
      mkexp(Pexp_constant(Const_nativeint(Nativeint.neg n)))
  | ("-" | "-."), Pexp_constant(Const_float f) ->
      mkexp(Pexp_constant(Const_float(neg_float_string f)))
  | _ ->
      mkexp(Pexp_apply(mkoperator ("~" ^ name) 1, ["", arg]))

let mkuplus name arg =
  let desc = arg.pexp_desc in
  match name, desc with
  | "+", Pexp_constant(Const_int _)
  | "+", Pexp_constant(Const_int32 _)
  | "+", Pexp_constant(Const_int64 _)
  | "+", Pexp_constant(Const_nativeint _)
  | ("+" | "+."), Pexp_constant(Const_float _) -> mkexp desc
  | _ ->
      mkexp(Pexp_apply(mkoperator ("~" ^ name) 1, ["", arg]))

let mkstrexp e attrs =
  {
    pstr_desc = Pstr_eval (e, attrs);
    pstr_loc = e.pexp_loc
  }

let array_function str name =

  ghloc (Ldot(Lident str, (if !Clflags.fast then "unsafe_" ^ name else name)))

let wrap_exp_attrs body (ext, attrs) =
  (* todo: keep exact location for the entire attribute *)
  let body = {body with pexp_attributes = attrs @ body.pexp_attributes} in
  match ext with
  | None -> body
  | Some id -> ghexp(Pexp_extension (id, PStr [mkstrexp body []]))

let mkexp_attrs d attrs =
  wrap_exp_attrs (mkexp d) attrs

# 222 "minParser.ml"
let yytransl_const = [|
  257 (* AMPERAMPER *);
  258 (* AMPERSAND *);
  259 (* AND *);
  260 (* AS *);
  261 (* ASSERT *);
  262 (* BACKQUOTE *);
  263 (* BANG *);
  264 (* BAR *);
  265 (* BARBAR *);
  266 (* BARRBRACKET *);
  267 (* BEGIN *);
  269 (* CLASS *);
  270 (* COLON *);
  271 (* COLONCOLON *);
  272 (* COLONEQUAL *);
  273 (* COLONGREATER *);
  274 (* COMMA *);
  275 (* CONSTRAINT *);
  276 (* DO *);
  277 (* DONE *);
  278 (* DOT *);
  279 (* DOTDOT *);
  280 (* DOWNTO *);
  281 (* ELSE *);
  282 (* END *);
    0 (* EOF *);
  283 (* EQUAL *);
  284 (* EXCEPTION *);
  285 (* EXTERNAL *);
  286 (* FALSE *);
  288 (* FOR *);
  289 (* FUN *);
  290 (* FUNCTION *);
  291 (* FUNCTOR *);
  292 (* GREATER *);
  293 (* GREATERRBRACE *);
  294 (* GREATERRBRACKET *);
  295 (* IF *);
  296 (* IN *);
  297 (* INCLUDE *);
  303 (* INHERIT *);
  304 (* INITIALIZER *);
  309 (* LAZY *);
  310 (* LBRACE *);
  311 (* LBRACELESS *);
  312 (* LBRACKET *);
  313 (* LBRACKETBAR *);
  314 (* LBRACKETLESS *);
  315 (* LBRACKETGREATER *);
  316 (* LBRACKETPERCENT *);
  317 (* LBRACKETPERCENTPERCENT *);
  318 (* LESS *);
  319 (* LESSMINUS *);
  320 (* LET *);
  322 (* LPAREN *);
  323 (* LBRACKETAT *);
  324 (* LBRACKETATAT *);
  325 (* LBRACKETATATAT *);
  326 (* MATCH *);
  327 (* METHOD *);
  328 (* MINUS *);
  329 (* MINUSDOT *);
  330 (* MINUSGREATER *);
  331 (* MODULE *);
  332 (* MUTABLE *);
  334 (* NEW *);
  335 (* OBJECT *);
  336 (* OF *);
  337 (* OPEN *);
  339 (* OR *);
  340 (* PERCENT *);
  341 (* PLUS *);
  342 (* PLUSDOT *);
  343 (* PLUSEQ *);
  345 (* PRIVATE *);
  346 (* QUESTION *);
  347 (* QUOTE *);
  348 (* RBRACE *);
  349 (* RBRACKET *);
  350 (* REC *);
  351 (* RPAREN *);
  352 (* SEMI *);
  353 (* SEMISEMI *);
  354 (* SHARP *);
  355 (* SIG *);
  356 (* STAR *);
  358 (* STRUCT *);
  359 (* THEN *);
  360 (* TILDE *);
  361 (* TO *);
  362 (* TRUE *);
  363 (* TRY *);
  364 (* TYPE *);
  366 (* UNDERSCORE *);
  367 (* VAL *);
  368 (* VIRTUAL *);
  369 (* WHEN *);
  370 (* WHILE *);
  371 (* WITH *);
  373 (* EOL *);
    0|]

let yytransl_block = [|
  268 (* CHAR *);
  287 (* FLOAT *);
  298 (* INFIXOP0 *);
  299 (* INFIXOP1 *);
  300 (* INFIXOP2 *);
  301 (* INFIXOP3 *);
  302 (* INFIXOP4 *);
  305 (* INT *);
  306 (* INT32 *);
  307 (* INT64 *);
  308 (* LABEL *);
  321 (* LIDENT *);
  333 (* NATIVEINT *);
  338 (* OPTLABEL *);
  344 (* PREFIXOP *);
  357 (* STRING *);
  365 (* UIDENT *);
  372 (* COMMENT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\003\000\003\000\009\000\009\000\011\000\011\000\
\004\000\004\000\013\000\013\000\013\000\013\000\013\000\005\000\
\006\000\007\000\008\000\008\000\015\000\015\000\015\000\012\000\
\012\000\010\000\010\000\010\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\021\000\021\000\024\000\017\000\
\017\000\025\000\025\000\022\000\022\000\014\000\014\000\026\000\
\026\000\026\000\026\000\027\000\027\000\023\000\023\000\023\000\
\023\000\018\000\018\000\016\000\016\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yylen = "\002\000\
\002\000\001\000\002\000\001\000\001\000\001\000\000\000\002\000\
\001\000\002\000\001\000\002\000\003\000\003\000\002\000\000\000\
\002\000\002\000\002\000\001\000\000\000\002\000\002\000\003\000\
\002\000\001\000\002\000\003\000\001\000\002\000\001\000\005\000\
\006\000\004\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\002\000\
\002\000\002\000\007\000\002\000\001\000\003\000\001\000\001\000\
\001\000\001\000\003\000\005\000\001\000\002\000\001\000\002\000\
\003\000\002\000\002\000\003\000\003\000\001\000\001\000\001\000\
\001\000\001\000\003\000\003\000\003\000\001\000\002\000\001\000\
\001\000\001\000\003\000\000\000\001\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\
\000\000\088\000\065\000\000\000\063\000\000\000\061\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\064\000\089\000\
\090\000\094\000\000\000\000\000\000\000\020\000\000\000\000\000\
\000\000\000\000\066\000\002\000\095\000\004\000\096\000\000\000\
\005\000\006\000\000\000\011\000\000\000\097\000\000\000\000\000\
\009\000\098\000\000\000\099\000\000\000\080\000\000\000\081\000\
\100\000\000\000\000\000\082\000\078\000\000\000\000\000\000\000\
\093\000\000\000\087\000\000\000\055\000\056\000\000\000\057\000\
\058\000\022\000\001\000\000\000\019\000\023\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\069\000\000\000\003\000\008\000\012\000\000\000\000\000\010\000\
\015\000\000\000\017\000\000\000\000\000\018\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\067\000\000\000\062\000\
\091\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\028\000\000\000\000\000\
\070\000\000\000\013\000\014\000\000\000\083\000\085\000\084\000\
\000\000\000\000\000\000\072\000\000\000\000\000\000\000\024\000\
\000\000\000\000\000\000\074\000\075\000\073\000\032\000\000\000\
\068\000\000\000\000\000\000\000"

let yydgoto = "\008\000\
\026\000\037\000\039\000\046\000\050\000\052\000\057\000\027\000\
\040\000\028\000\042\000\048\000\049\000\124\000\030\000\066\000\
\125\000\031\000\032\000\033\000\104\000\034\000\035\000\105\000\
\164\000\061\000\062\000"

let yysindex = "\087\001\
\115\255\034\000\043\001\004\001\000\000\193\006\142\255\000\000\
\039\003\000\000\000\000\193\006\000\000\200\254\000\000\164\255\
\193\006\193\006\194\254\193\006\193\006\115\255\000\000\000\000\
\000\000\000\000\049\000\218\254\218\254\000\000\028\255\228\006\
\005\255\037\255\000\000\000\000\000\000\000\000\000\000\216\254\
\000\000\000\000\223\254\000\000\081\001\000\000\044\000\044\000\
\000\000\000\000\200\254\000\000\058\000\000\000\009\255\000\000\
\000\000\002\000\038\255\000\000\000\000\043\255\040\255\217\254\
\000\000\124\000\000\000\226\254\000\000\000\000\038\255\000\000\
\000\000\000\000\000\000\200\254\000\000\000\000\203\254\193\006\
\193\006\193\006\193\006\193\006\193\006\193\006\193\006\193\006\
\193\006\193\006\193\006\193\006\193\006\193\006\193\006\193\006\
\193\006\193\006\193\006\193\006\193\006\001\255\040\255\039\003\
\000\000\193\006\000\000\000\000\000\000\044\000\044\000\000\000\
\000\000\124\000\000\000\242\254\142\255\000\000\219\254\142\255\
\007\255\193\006\125\255\010\255\036\255\000\000\124\000\000\000\
\000\000\116\007\116\007\196\255\083\007\196\255\136\007\136\007\
\136\007\136\007\225\254\032\255\032\255\136\007\225\254\225\254\
\196\255\032\255\225\254\225\254\225\254\000\000\032\255\193\006\
\000\000\196\255\000\000\000\000\036\255\000\000\000\000\000\000\
\193\006\051\007\193\006\000\000\125\255\193\006\193\006\000\000\
\241\254\244\254\193\006\000\000\000\000\000\000\000\000\054\255\
\000\000\083\007\193\006\083\007"

let yyrindex = "\000\000\
\129\000\000\000\027\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\213\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\129\000\000\000\000\000\
\000\000\000\000\000\000\129\000\129\000\000\000\122\000\040\000\
\132\001\143\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\027\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\213\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\000\000\000\000\005\000\221\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\063\000\000\000\
\000\000\000\000\000\000\213\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\218\005\000\000\000\000\211\000\054\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\114\255\000\000\082\000\000\000\000\000\000\000\
\000\000\017\003\106\003\181\001\171\000\007\002\011\006\014\006\
\114\006\119\006\078\004\233\002\066\003\124\006\144\004\210\004\
\096\002\155\003\020\005\086\005\152\005\000\000\244\003\000\000\
\000\000\207\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\033\000\
\000\000\169\002\000\000\197\003"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\113\000\
\000\000\007\000\094\000\120\000\254\255\252\255\236\255\212\255\
\158\255\011\000\004\000\008\000\000\000\000\000\013\000\035\000\
\232\255\133\255\000\000"

let yytablesize = 2284
let yytable = "\165\000\
\086\000\118\000\058\000\117\000\079\000\034\000\114\000\077\000\
\078\000\041\000\047\000\128\000\053\000\090\000\091\000\157\000\
\063\000\059\000\064\000\060\000\069\000\070\000\068\000\072\000\
\073\000\076\000\102\000\117\000\168\000\071\000\076\000\127\000\
\068\000\036\000\010\000\011\000\166\000\065\000\010\000\026\000\
\103\000\165\000\019\000\044\000\112\000\113\000\025\000\019\000\
\075\000\079\000\116\000\110\000\096\000\013\000\106\000\129\000\
\107\000\115\000\022\000\119\000\120\000\121\000\025\000\122\000\
\126\000\059\000\152\000\060\000\101\000\015\000\016\000\129\000\
\161\000\054\000\055\000\167\000\059\000\091\000\060\000\176\000\
\158\000\024\000\177\000\130\000\131\000\132\000\133\000\134\000\
\135\000\136\000\137\000\138\000\139\000\140\000\141\000\142\000\
\143\000\144\000\145\000\146\000\147\000\148\000\149\000\067\000\
\151\000\023\000\150\000\155\000\156\000\154\000\024\000\103\000\
\159\000\025\000\024\000\160\000\179\000\025\000\056\000\009\000\
\029\000\086\000\043\000\007\000\059\000\162\000\060\000\059\000\
\021\000\060\000\059\000\080\000\060\000\059\000\074\000\060\000\
\108\000\059\000\153\000\060\000\173\000\029\000\000\000\000\000\
\010\000\011\000\000\000\029\000\029\000\000\000\000\000\163\000\
\000\000\012\000\010\000\000\000\000\000\000\000\169\000\000\000\
\000\000\000\000\043\000\013\000\111\000\000\000\000\000\170\000\
\009\000\172\000\054\000\010\000\174\000\175\000\178\000\059\000\
\000\000\060\000\014\000\015\000\016\000\000\000\180\000\000\000\
\000\000\000\000\017\000\018\000\000\000\054\000\055\000\000\000\
\000\000\010\000\011\000\019\000\080\000\081\000\000\000\020\000\
\021\000\000\000\012\000\000\000\082\000\000\000\054\000\055\000\
\000\000\000\000\071\000\022\000\013\000\000\000\000\000\023\000\
\000\000\000\000\000\000\000\000\024\000\000\000\085\000\025\000\
\000\000\000\000\000\000\051\000\015\000\016\000\024\000\086\000\
\000\000\025\000\056\000\017\000\018\000\087\000\088\000\089\000\
\090\000\091\000\000\000\000\000\000\000\000\000\000\000\024\000\
\020\000\021\000\025\000\056\000\000\000\000\000\000\000\000\000\
\000\000\092\000\067\000\044\000\000\000\000\000\000\000\000\000\
\023\000\000\000\000\000\093\000\094\000\024\000\000\000\000\000\
\025\000\000\000\086\000\117\000\000\000\000\000\095\000\096\000\
\097\000\098\000\099\000\086\000\000\000\000\000\086\000\079\000\
\000\000\068\000\068\000\000\000\000\000\000\000\000\000\101\000\
\000\000\068\000\038\000\000\000\000\000\034\000\000\000\000\000\
\068\000\000\000\068\000\000\000\000\000\000\000\068\000\000\000\
\000\000\068\000\000\000\068\000\000\000\000\000\068\000\068\000\
\026\000\086\000\086\000\000\000\068\000\034\000\000\000\000\000\
\068\000\000\000\068\000\068\000\068\000\068\000\068\000\026\000\
\109\000\068\000\000\000\000\000\000\000\000\000\034\000\001\000\
\002\000\003\000\004\000\005\000\006\000\007\000\068\000\086\000\
\068\000\068\000\068\000\079\000\034\000\034\000\034\000\026\000\
\068\000\068\000\086\000\076\000\034\000\086\000\086\000\000\000\
\000\000\068\000\000\000\068\000\068\000\068\000\068\000\068\000\
\026\000\000\000\086\000\086\000\019\000\000\000\025\000\068\000\
\068\000\068\000\086\000\029\000\068\000\068\000\026\000\068\000\
\026\000\086\000\068\000\086\000\045\000\068\000\026\000\025\000\
\000\000\024\000\086\000\000\000\086\000\000\000\000\000\086\000\
\086\000\010\000\000\000\000\000\000\000\086\000\000\000\025\000\
\000\000\086\000\024\000\086\000\086\000\086\000\086\000\086\000\
\000\000\000\000\086\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\024\000\000\000\051\000\000\000\000\000\086\000\
\000\000\086\000\086\000\086\000\123\000\055\000\000\000\000\000\
\000\000\086\000\086\000\054\000\000\000\000\000\000\000\000\000\
\000\000\000\000\086\000\000\000\086\000\086\000\086\000\086\000\
\086\000\000\000\054\000\071\000\071\000\000\000\000\000\000\000\
\086\000\086\000\086\000\071\000\060\000\086\000\086\000\000\000\
\086\000\000\000\071\000\086\000\071\000\024\000\086\000\000\000\
\025\000\056\000\054\000\071\000\000\000\071\000\000\000\000\000\
\071\000\071\000\092\000\000\000\000\000\000\000\071\000\000\000\
\000\000\000\000\071\000\054\000\071\000\071\000\071\000\071\000\
\071\000\000\000\000\000\071\000\000\000\000\000\077\000\000\000\
\009\000\054\000\054\000\054\000\000\000\000\000\000\000\000\000\
\071\000\054\000\071\000\071\000\071\000\092\000\092\000\000\000\
\000\000\000\000\071\000\071\000\000\000\000\000\000\000\000\000\
\000\000\010\000\011\000\071\000\000\000\071\000\071\000\071\000\
\071\000\071\000\012\000\000\000\000\000\000\000\000\000\009\000\
\000\000\071\000\071\000\071\000\013\000\030\000\071\000\071\000\
\000\000\071\000\000\000\000\000\071\000\000\000\092\000\071\000\
\000\000\092\000\092\000\014\000\015\000\016\000\000\000\000\000\
\010\000\011\000\000\000\017\000\018\000\000\000\000\000\000\000\
\000\000\012\000\000\000\000\000\019\000\009\000\000\000\000\000\
\020\000\021\000\000\000\013\000\000\000\000\000\000\000\050\000\
\000\000\000\000\000\000\000\000\045\000\000\000\000\000\000\000\
\023\000\000\000\014\000\015\000\016\000\024\000\010\000\011\000\
\025\000\000\000\017\000\018\000\000\000\000\000\000\000\012\000\
\000\000\000\000\000\000\019\000\000\000\000\000\000\000\020\000\
\021\000\013\000\000\000\000\000\029\000\029\000\000\000\000\000\
\000\000\000\000\000\000\000\000\029\000\000\000\031\000\023\000\
\014\000\015\000\016\000\029\000\024\000\029\000\000\000\025\000\
\017\000\018\000\000\000\000\000\029\000\000\000\029\000\000\000\
\000\000\019\000\000\000\000\000\000\000\020\000\021\000\029\000\
\033\000\000\000\000\000\029\000\000\000\029\000\029\000\029\000\
\029\000\029\000\000\000\000\000\000\000\023\000\000\000\000\000\
\000\000\000\000\024\000\000\000\000\000\025\000\000\000\000\000\
\000\000\029\000\000\000\029\000\051\000\000\000\051\000\000\000\
\000\000\000\000\000\000\029\000\029\000\051\000\076\000\000\000\
\000\000\000\000\000\000\000\000\029\000\000\000\029\000\029\000\
\029\000\029\000\029\000\000\000\051\000\060\000\060\000\000\000\
\000\000\000\000\029\000\029\000\029\000\060\000\000\000\029\000\
\038\000\000\000\029\000\000\000\060\000\000\000\060\000\000\000\
\000\000\000\000\000\000\000\000\051\000\060\000\000\000\060\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\060\000\000\000\000\000\000\000\060\000\051\000\060\000\060\000\
\060\000\060\000\060\000\000\000\000\000\000\000\000\000\000\000\
\053\000\000\000\000\000\051\000\051\000\051\000\077\000\000\000\
\077\000\000\000\060\000\051\000\060\000\000\000\000\000\077\000\
\000\000\000\000\000\000\000\000\060\000\060\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\060\000\077\000\060\000\
\060\000\060\000\060\000\060\000\000\000\000\000\030\000\030\000\
\000\000\000\000\000\000\060\000\060\000\060\000\030\000\000\000\
\060\000\039\000\000\000\060\000\000\000\030\000\077\000\030\000\
\000\000\000\000\000\000\000\000\000\000\000\000\030\000\000\000\
\030\000\000\000\000\000\000\000\000\000\000\000\000\000\077\000\
\000\000\030\000\000\000\000\000\000\000\030\000\000\000\030\000\
\030\000\030\000\030\000\030\000\000\000\077\000\077\000\077\000\
\000\000\052\000\000\000\000\000\000\000\077\000\000\000\050\000\
\000\000\050\000\000\000\030\000\000\000\030\000\000\000\000\000\
\050\000\000\000\000\000\000\000\000\000\030\000\030\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\030\000\050\000\
\030\000\030\000\030\000\030\000\030\000\000\000\000\000\031\000\
\031\000\000\000\000\000\000\000\030\000\030\000\030\000\031\000\
\000\000\030\000\046\000\000\000\030\000\000\000\031\000\050\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\000\
\000\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\
\050\000\000\000\031\000\000\000\000\000\000\000\031\000\000\000\
\031\000\031\000\031\000\031\000\031\000\000\000\050\000\050\000\
\050\000\033\000\000\000\000\000\059\000\000\000\050\000\000\000\
\000\000\000\000\000\000\000\000\031\000\000\000\031\000\000\000\
\033\000\000\000\000\000\000\000\000\000\000\000\031\000\031\000\
\000\000\000\000\000\000\000\000\000\000\000\000\076\000\031\000\
\076\000\031\000\031\000\031\000\031\000\031\000\000\000\076\000\
\033\000\038\000\038\000\000\000\000\000\031\000\031\000\031\000\
\000\000\038\000\031\000\045\000\000\000\031\000\076\000\000\000\
\038\000\033\000\038\000\000\000\000\000\000\000\000\000\000\000\
\000\000\038\000\000\000\038\000\000\000\000\000\000\000\033\000\
\033\000\033\000\000\000\000\000\038\000\000\000\076\000\033\000\
\038\000\000\000\038\000\038\000\038\000\038\000\000\000\000\000\
\000\000\053\000\000\000\000\000\000\000\000\000\000\000\076\000\
\053\000\000\000\053\000\000\000\000\000\000\000\038\000\000\000\
\038\000\053\000\000\000\000\000\000\000\076\000\076\000\076\000\
\038\000\038\000\000\000\000\000\000\000\076\000\000\000\000\000\
\053\000\038\000\000\000\038\000\038\000\038\000\038\000\038\000\
\000\000\000\000\039\000\039\000\010\000\011\000\000\000\038\000\
\038\000\038\000\039\000\000\000\038\000\037\000\000\000\038\000\
\053\000\039\000\000\000\039\000\000\000\000\000\000\000\013\000\
\000\000\000\000\039\000\000\000\039\000\000\000\000\000\000\000\
\000\000\053\000\000\000\053\000\000\000\039\000\000\000\015\000\
\016\000\039\000\000\000\039\000\039\000\039\000\039\000\053\000\
\053\000\053\000\052\000\000\000\000\000\000\000\000\000\053\000\
\000\000\052\000\000\000\052\000\000\000\000\000\000\000\039\000\
\000\000\039\000\052\000\000\000\000\000\000\000\000\000\000\000\
\000\000\039\000\039\000\023\000\000\000\000\000\000\000\043\000\
\024\000\052\000\039\000\025\000\039\000\039\000\039\000\039\000\
\039\000\000\000\000\000\046\000\046\000\000\000\000\000\000\000\
\039\000\039\000\039\000\046\000\000\000\039\000\000\000\000\000\
\039\000\052\000\046\000\000\000\046\000\000\000\000\000\000\000\
\000\000\000\000\000\000\046\000\000\000\046\000\000\000\000\000\
\000\000\000\000\052\000\000\000\052\000\000\000\046\000\000\000\
\000\000\000\000\046\000\000\000\046\000\046\000\046\000\046\000\
\052\000\052\000\052\000\000\000\000\000\000\000\000\000\000\000\
\052\000\044\000\000\000\000\000\000\000\000\000\000\000\000\000\
\046\000\000\000\046\000\000\000\000\000\059\000\000\000\000\000\
\000\000\000\000\046\000\046\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\046\000\059\000\046\000\046\000\046\000\
\046\000\046\000\000\000\000\000\045\000\045\000\000\000\000\000\
\000\000\046\000\046\000\046\000\045\000\000\000\046\000\000\000\
\000\000\046\000\000\000\045\000\059\000\045\000\000\000\000\000\
\000\000\000\000\000\000\000\000\045\000\000\000\045\000\000\000\
\000\000\000\000\000\000\040\000\000\000\059\000\000\000\045\000\
\000\000\000\000\000\000\045\000\000\000\045\000\045\000\045\000\
\045\000\000\000\000\000\059\000\059\000\059\000\000\000\000\000\
\000\000\000\000\000\000\059\000\000\000\000\000\000\000\000\000\
\000\000\045\000\000\000\045\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\045\000\045\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\045\000\000\000\045\000\045\000\
\045\000\045\000\045\000\000\000\000\000\000\000\037\000\037\000\
\000\000\000\000\045\000\045\000\045\000\041\000\037\000\045\000\
\000\000\000\000\045\000\000\000\000\000\037\000\000\000\037\000\
\000\000\000\000\000\000\000\000\000\000\000\000\037\000\000\000\
\037\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\037\000\000\000\000\000\000\000\037\000\000\000\037\000\
\037\000\037\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\037\000\000\000\037\000\000\000\000\000\
\043\000\043\000\000\000\000\000\000\000\037\000\037\000\042\000\
\043\000\000\000\000\000\000\000\000\000\000\000\037\000\043\000\
\037\000\043\000\037\000\037\000\037\000\000\000\000\000\000\000\
\043\000\000\000\043\000\000\000\037\000\037\000\037\000\000\000\
\000\000\000\000\000\000\043\000\037\000\000\000\000\000\043\000\
\000\000\043\000\043\000\043\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\043\000\000\000\043\000\
\000\000\000\000\044\000\044\000\000\000\000\000\000\000\043\000\
\043\000\027\000\044\000\000\000\000\000\000\000\000\000\000\000\
\043\000\044\000\043\000\044\000\043\000\043\000\043\000\000\000\
\000\000\000\000\044\000\000\000\044\000\000\000\043\000\043\000\
\043\000\000\000\000\000\000\000\000\000\044\000\043\000\000\000\
\000\000\044\000\000\000\044\000\044\000\044\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\047\000\000\000\000\000\049\000\000\000\044\000\
\000\000\044\000\000\000\000\000\040\000\040\000\000\000\000\000\
\000\000\044\000\044\000\000\000\040\000\000\000\000\000\000\000\
\000\000\000\000\044\000\040\000\044\000\040\000\044\000\044\000\
\044\000\000\000\000\000\000\000\040\000\000\000\040\000\000\000\
\044\000\044\000\044\000\000\000\000\000\000\000\000\000\040\000\
\044\000\000\000\000\000\040\000\000\000\040\000\040\000\040\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\040\000\000\000\040\000\000\000\000\000\041\000\041\000\
\000\000\000\000\000\000\040\000\040\000\000\000\041\000\000\000\
\000\000\000\000\000\000\000\000\040\000\041\000\040\000\041\000\
\040\000\040\000\040\000\000\000\000\000\000\000\041\000\000\000\
\041\000\035\000\040\000\040\000\040\000\000\000\036\000\000\000\
\000\000\041\000\040\000\048\000\000\000\041\000\000\000\041\000\
\041\000\041\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\041\000\000\000\041\000\000\000\000\000\
\042\000\042\000\000\000\000\000\000\000\041\000\041\000\000\000\
\042\000\000\000\000\000\000\000\000\000\000\000\041\000\042\000\
\041\000\042\000\041\000\041\000\041\000\000\000\000\000\000\000\
\042\000\000\000\042\000\000\000\041\000\041\000\041\000\000\000\
\000\000\000\000\000\000\042\000\041\000\000\000\000\000\042\000\
\000\000\042\000\042\000\042\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\000\000\000\042\000\
\000\000\000\000\027\000\027\000\000\000\000\000\000\000\042\000\
\042\000\000\000\027\000\000\000\000\000\000\000\000\000\000\000\
\042\000\027\000\042\000\027\000\042\000\042\000\042\000\000\000\
\000\000\000\000\027\000\000\000\027\000\000\000\042\000\042\000\
\042\000\000\000\000\000\000\000\000\000\027\000\042\000\000\000\
\000\000\027\000\000\000\027\000\027\000\027\000\027\000\027\000\
\000\000\000\000\000\000\047\000\047\000\000\000\049\000\049\000\
\000\000\000\000\000\000\047\000\000\000\000\000\049\000\027\000\
\000\000\000\000\047\000\000\000\047\000\049\000\000\000\049\000\
\000\000\000\000\000\000\047\000\000\000\047\000\049\000\000\000\
\049\000\000\000\027\000\000\000\027\000\027\000\047\000\000\000\
\027\000\049\000\047\000\000\000\047\000\049\000\000\000\049\000\
\027\000\027\000\027\000\000\000\000\000\027\000\000\000\000\000\
\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\047\000\000\000\047\000\049\000\000\000\049\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\047\000\000\000\047\000\049\000\000\000\
\049\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\047\000\047\000\047\000\049\000\049\000\049\000\000\000\
\000\000\047\000\035\000\035\000\049\000\000\000\000\000\036\000\
\036\000\000\000\035\000\000\000\048\000\048\000\000\000\036\000\
\000\000\035\000\000\000\035\000\048\000\000\000\036\000\000\000\
\036\000\000\000\035\000\048\000\035\000\048\000\000\000\036\000\
\000\000\036\000\000\000\000\000\048\000\035\000\048\000\000\000\
\000\000\035\000\036\000\035\000\000\000\000\000\036\000\048\000\
\036\000\000\000\000\000\048\000\000\000\048\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\035\000\
\000\000\035\000\000\000\000\000\036\000\000\000\036\000\000\000\
\000\000\048\000\000\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\035\000\000\000\035\000\009\000\000\000\036\000\
\000\000\036\000\000\000\000\000\048\000\000\000\048\000\000\000\
\035\000\035\000\035\000\000\000\000\000\036\000\036\000\036\000\
\035\000\000\000\048\000\048\000\048\000\036\000\010\000\011\000\
\000\000\000\000\048\000\000\000\080\000\081\000\000\000\012\000\
\000\000\000\000\000\000\000\000\082\000\000\000\000\000\000\000\
\000\000\013\000\000\000\083\000\000\000\084\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\085\000\000\000\
\051\000\015\000\016\000\000\000\000\000\000\000\000\000\086\000\
\017\000\018\000\000\000\000\000\000\000\087\000\088\000\089\000\
\090\000\091\000\000\000\000\000\000\000\020\000\021\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\092\000\000\000\000\000\000\000\023\000\000\000\000\000\
\000\000\000\000\024\000\093\000\094\000\025\000\000\000\000\000\
\000\000\000\000\000\000\080\000\081\000\000\000\095\000\096\000\
\097\000\098\000\099\000\082\000\000\000\000\000\000\000\000\000\
\000\000\000\000\083\000\100\000\084\000\000\000\000\000\101\000\
\000\000\000\000\000\000\171\000\000\000\085\000\000\000\000\000\
\000\000\000\000\000\000\080\000\081\000\000\000\086\000\000\000\
\000\000\000\000\000\000\082\000\087\000\088\000\089\000\090\000\
\091\000\000\000\083\000\000\000\084\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\085\000\000\000\000\000\
\092\000\000\000\000\000\000\000\080\000\081\000\086\000\000\000\
\000\000\000\000\093\000\094\000\087\000\088\000\089\000\090\000\
\091\000\000\000\000\000\000\000\000\000\095\000\096\000\097\000\
\098\000\099\000\000\000\000\000\000\000\000\000\085\000\000\000\
\092\000\000\000\000\000\000\000\000\000\000\000\101\000\086\000\
\000\000\000\000\093\000\094\000\000\000\087\000\088\000\089\000\
\090\000\091\000\000\000\000\000\000\000\095\000\096\000\097\000\
\098\000\099\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\092\000\088\000\089\000\090\000\091\000\101\000\000\000\
\000\000\000\000\000\000\093\000\094\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\096\000\
\097\000\098\000\099\000\000\000\000\000\000\000\000\000\093\000\
\094\000\000\000\000\000\000\000\000\000\000\000\000\000\101\000\
\000\000\000\000\000\000\096\000\097\000\098\000\099\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\101\000"

let yycheck = "\123\000\
\000\000\000\000\007\000\018\001\000\000\000\000\051\000\028\000\
\029\000\003\000\004\000\065\001\006\000\045\001\046\001\114\000\
\009\000\007\000\012\000\007\000\017\000\018\000\016\000\020\000\
\021\000\064\001\022\001\018\001\127\000\019\000\064\001\076\000\
\000\000\000\000\030\001\031\001\027\001\094\001\030\001\000\000\
\033\000\165\000\081\001\000\000\047\000\048\000\109\001\081\001\
\000\000\022\001\055\000\045\000\084\001\049\001\018\001\109\001\
\097\001\000\000\097\001\022\001\018\001\022\001\000\000\103\001\
\095\001\055\000\066\001\055\000\100\001\065\001\066\001\109\001\
\066\001\065\001\066\001\040\001\066\000\046\001\066\000\095\001\
\095\001\000\000\095\001\080\000\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\088\000\089\000\090\000\091\000\092\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\095\001\
\101\000\101\001\100\000\110\000\111\000\106\000\106\001\104\000\
\117\000\109\001\106\001\120\000\063\001\109\001\110\001\005\001\
\001\000\000\000\003\000\097\001\114\000\122\000\114\000\117\000\
\000\000\117\000\120\000\018\001\120\000\123\000\022\000\123\000\
\043\000\127\000\104\000\127\000\165\000\022\000\255\255\255\255\
\030\001\031\001\255\255\028\000\029\000\255\255\255\255\027\001\
\255\255\039\001\030\001\255\255\255\255\255\255\152\000\255\255\
\255\255\255\255\043\000\049\001\045\000\255\255\255\255\161\000\
\005\001\163\000\000\000\030\001\166\000\167\000\171\000\165\000\
\255\255\165\000\064\001\065\001\066\001\255\255\179\000\255\255\
\255\255\255\255\072\001\073\001\255\255\065\001\066\001\255\255\
\255\255\030\001\031\001\081\001\001\001\002\001\255\255\085\001\
\086\001\255\255\039\001\255\255\009\001\255\255\065\001\066\001\
\255\255\255\255\000\000\097\001\049\001\255\255\255\255\101\001\
\255\255\255\255\255\255\255\255\106\001\255\255\027\001\109\001\
\255\255\255\255\255\255\064\001\065\001\066\001\106\001\036\001\
\255\255\109\001\110\001\072\001\073\001\042\001\043\001\044\001\
\045\001\046\001\255\255\255\255\255\255\255\255\255\255\106\001\
\085\001\086\001\109\001\110\001\255\255\255\255\255\255\255\255\
\255\255\062\001\095\001\000\000\255\255\255\255\255\255\255\255\
\101\001\255\255\255\255\072\001\073\001\106\001\255\255\255\255\
\109\001\255\255\018\001\018\001\255\255\255\255\083\001\084\001\
\085\001\086\001\087\001\027\001\255\255\255\255\030\001\027\001\
\255\255\001\001\002\001\255\255\255\255\255\255\255\255\100\001\
\255\255\009\001\000\000\255\255\255\255\040\001\255\255\255\255\
\016\001\255\255\018\001\255\255\255\255\255\255\022\001\255\255\
\255\255\025\001\255\255\027\001\255\255\255\255\030\001\031\001\
\025\001\065\001\066\001\255\255\036\001\064\001\255\255\255\255\
\040\001\255\255\042\001\043\001\044\001\045\001\046\001\040\001\
\000\000\049\001\255\255\255\255\255\255\255\255\081\001\001\000\
\002\000\003\000\004\000\005\000\006\000\007\000\062\001\095\001\
\064\001\065\001\066\001\095\001\095\001\096\001\097\001\064\001\
\072\001\073\001\106\001\064\001\103\001\109\001\110\001\255\255\
\255\255\081\001\255\255\083\001\084\001\085\001\086\001\087\001\
\081\001\255\255\001\001\002\001\081\001\255\255\064\001\095\001\
\096\001\097\001\009\001\000\000\100\001\101\001\095\001\103\001\
\097\001\016\001\106\001\018\001\097\001\109\001\103\001\081\001\
\255\255\064\001\025\001\255\255\027\001\255\255\255\255\030\001\
\031\001\030\001\255\255\255\255\255\255\036\001\255\255\097\001\
\255\255\040\001\081\001\042\001\043\001\044\001\045\001\046\001\
\255\255\255\255\049\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\097\001\255\255\000\000\255\255\255\255\062\001\
\255\255\064\001\065\001\066\001\065\001\066\001\255\255\255\255\
\255\255\072\001\073\001\025\001\255\255\255\255\255\255\255\255\
\255\255\255\255\081\001\255\255\083\001\084\001\085\001\086\001\
\087\001\255\255\040\001\001\001\002\001\255\255\255\255\255\255\
\095\001\096\001\097\001\009\001\000\000\100\001\101\001\255\255\
\103\001\255\255\016\001\106\001\018\001\106\001\109\001\255\255\
\109\001\110\001\064\001\025\001\255\255\027\001\255\255\255\255\
\030\001\031\001\030\001\255\255\255\255\255\255\036\001\255\255\
\255\255\255\255\040\001\081\001\042\001\043\001\044\001\045\001\
\046\001\255\255\255\255\049\001\255\255\255\255\000\000\255\255\
\005\001\095\001\096\001\097\001\255\255\255\255\255\255\255\255\
\062\001\103\001\064\001\065\001\066\001\065\001\066\001\255\255\
\255\255\255\255\072\001\073\001\255\255\255\255\255\255\255\255\
\255\255\030\001\031\001\081\001\255\255\083\001\084\001\085\001\
\086\001\087\001\039\001\255\255\255\255\255\255\255\255\005\001\
\255\255\095\001\096\001\097\001\049\001\000\000\100\001\101\001\
\255\255\103\001\255\255\255\255\106\001\255\255\106\001\109\001\
\255\255\109\001\110\001\064\001\065\001\066\001\255\255\255\255\
\030\001\031\001\255\255\072\001\073\001\255\255\255\255\255\255\
\255\255\039\001\255\255\255\255\081\001\005\001\255\255\255\255\
\085\001\086\001\255\255\049\001\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\097\001\255\255\255\255\255\255\
\101\001\255\255\064\001\065\001\066\001\106\001\030\001\031\001\
\109\001\255\255\072\001\073\001\255\255\255\255\255\255\039\001\
\255\255\255\255\255\255\081\001\255\255\255\255\255\255\085\001\
\086\001\049\001\255\255\255\255\001\001\002\001\255\255\255\255\
\255\255\255\255\255\255\255\255\009\001\255\255\000\000\101\001\
\064\001\065\001\066\001\016\001\106\001\018\001\255\255\109\001\
\072\001\073\001\255\255\255\255\025\001\255\255\027\001\255\255\
\255\255\081\001\255\255\255\255\255\255\085\001\086\001\036\001\
\000\000\255\255\255\255\040\001\255\255\042\001\043\001\044\001\
\045\001\046\001\255\255\255\255\255\255\101\001\255\255\255\255\
\255\255\255\255\106\001\255\255\255\255\109\001\255\255\255\255\
\255\255\062\001\255\255\064\001\016\001\255\255\018\001\255\255\
\255\255\255\255\255\255\072\001\073\001\025\001\000\000\255\255\
\255\255\255\255\255\255\255\255\081\001\255\255\083\001\084\001\
\085\001\086\001\087\001\255\255\040\001\001\001\002\001\255\255\
\255\255\255\255\095\001\096\001\097\001\009\001\255\255\100\001\
\000\000\255\255\103\001\255\255\016\001\255\255\018\001\255\255\
\255\255\255\255\255\255\255\255\064\001\025\001\255\255\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\036\001\255\255\255\255\255\255\040\001\081\001\042\001\043\001\
\044\001\045\001\046\001\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\095\001\096\001\097\001\016\001\255\255\
\018\001\255\255\062\001\103\001\064\001\255\255\255\255\025\001\
\255\255\255\255\255\255\255\255\072\001\073\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\081\001\040\001\083\001\
\084\001\085\001\086\001\087\001\255\255\255\255\001\001\002\001\
\255\255\255\255\255\255\095\001\096\001\097\001\009\001\255\255\
\100\001\000\000\255\255\103\001\255\255\016\001\064\001\018\001\
\255\255\255\255\255\255\255\255\255\255\255\255\025\001\255\255\
\027\001\255\255\255\255\255\255\255\255\255\255\255\255\081\001\
\255\255\036\001\255\255\255\255\255\255\040\001\255\255\042\001\
\043\001\044\001\045\001\046\001\255\255\095\001\096\001\097\001\
\255\255\000\000\255\255\255\255\255\255\103\001\255\255\016\001\
\255\255\018\001\255\255\062\001\255\255\064\001\255\255\255\255\
\025\001\255\255\255\255\255\255\255\255\072\001\073\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\081\001\040\001\
\083\001\084\001\085\001\086\001\087\001\255\255\255\255\001\001\
\002\001\255\255\255\255\255\255\095\001\096\001\097\001\009\001\
\255\255\100\001\000\000\255\255\103\001\255\255\016\001\064\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\025\001\
\255\255\027\001\255\255\255\255\255\255\255\255\255\255\255\255\
\081\001\255\255\036\001\255\255\255\255\255\255\040\001\255\255\
\042\001\043\001\044\001\045\001\046\001\255\255\095\001\096\001\
\097\001\025\001\255\255\255\255\000\000\255\255\103\001\255\255\
\255\255\255\255\255\255\255\255\062\001\255\255\064\001\255\255\
\040\001\255\255\255\255\255\255\255\255\255\255\072\001\073\001\
\255\255\255\255\255\255\255\255\255\255\255\255\016\001\081\001\
\018\001\083\001\084\001\085\001\086\001\087\001\255\255\025\001\
\064\001\001\001\002\001\255\255\255\255\095\001\096\001\097\001\
\255\255\009\001\100\001\000\000\255\255\103\001\040\001\255\255\
\016\001\081\001\018\001\255\255\255\255\255\255\255\255\255\255\
\255\255\025\001\255\255\027\001\255\255\255\255\255\255\095\001\
\096\001\097\001\255\255\255\255\036\001\255\255\064\001\103\001\
\040\001\255\255\042\001\043\001\044\001\045\001\255\255\255\255\
\255\255\009\001\255\255\255\255\255\255\255\255\255\255\081\001\
\016\001\255\255\018\001\255\255\255\255\255\255\062\001\255\255\
\064\001\025\001\255\255\255\255\255\255\095\001\096\001\097\001\
\072\001\073\001\255\255\255\255\255\255\103\001\255\255\255\255\
\040\001\081\001\255\255\083\001\084\001\085\001\086\001\087\001\
\255\255\255\255\001\001\002\001\030\001\031\001\255\255\095\001\
\096\001\097\001\009\001\255\255\100\001\000\000\255\255\103\001\
\064\001\016\001\255\255\018\001\255\255\255\255\255\255\049\001\
\255\255\255\255\025\001\255\255\027\001\255\255\255\255\255\255\
\255\255\081\001\255\255\083\001\255\255\036\001\255\255\065\001\
\066\001\040\001\255\255\042\001\043\001\044\001\045\001\095\001\
\096\001\097\001\009\001\255\255\255\255\255\255\255\255\103\001\
\255\255\016\001\255\255\018\001\255\255\255\255\255\255\062\001\
\255\255\064\001\025\001\255\255\255\255\255\255\255\255\255\255\
\255\255\072\001\073\001\101\001\255\255\255\255\255\255\000\000\
\106\001\040\001\081\001\109\001\083\001\084\001\085\001\086\001\
\087\001\255\255\255\255\001\001\002\001\255\255\255\255\255\255\
\095\001\096\001\097\001\009\001\255\255\100\001\255\255\255\255\
\103\001\064\001\016\001\255\255\018\001\255\255\255\255\255\255\
\255\255\255\255\255\255\025\001\255\255\027\001\255\255\255\255\
\255\255\255\255\081\001\255\255\083\001\255\255\036\001\255\255\
\255\255\255\255\040\001\255\255\042\001\043\001\044\001\045\001\
\095\001\096\001\097\001\255\255\255\255\255\255\255\255\255\255\
\103\001\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\062\001\255\255\064\001\255\255\255\255\025\001\255\255\255\255\
\255\255\255\255\072\001\073\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\081\001\040\001\083\001\084\001\085\001\
\086\001\087\001\255\255\255\255\001\001\002\001\255\255\255\255\
\255\255\095\001\096\001\097\001\009\001\255\255\100\001\255\255\
\255\255\103\001\255\255\016\001\064\001\018\001\255\255\255\255\
\255\255\255\255\255\255\255\255\025\001\255\255\027\001\255\255\
\255\255\255\255\255\255\000\000\255\255\081\001\255\255\036\001\
\255\255\255\255\255\255\040\001\255\255\042\001\043\001\044\001\
\045\001\255\255\255\255\095\001\096\001\097\001\255\255\255\255\
\255\255\255\255\255\255\103\001\255\255\255\255\255\255\255\255\
\255\255\062\001\255\255\064\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\072\001\073\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\081\001\255\255\083\001\084\001\
\085\001\086\001\087\001\255\255\255\255\255\255\001\001\002\001\
\255\255\255\255\095\001\096\001\097\001\000\000\009\001\100\001\
\255\255\255\255\103\001\255\255\255\255\016\001\255\255\018\001\
\255\255\255\255\255\255\255\255\255\255\255\255\025\001\255\255\
\027\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\036\001\255\255\255\255\255\255\040\001\255\255\042\001\
\043\001\044\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\062\001\255\255\064\001\255\255\255\255\
\001\001\002\001\255\255\255\255\255\255\072\001\073\001\000\000\
\009\001\255\255\255\255\255\255\255\255\255\255\081\001\016\001\
\083\001\018\001\085\001\086\001\087\001\255\255\255\255\255\255\
\025\001\255\255\027\001\255\255\095\001\096\001\097\001\255\255\
\255\255\255\255\255\255\036\001\103\001\255\255\255\255\040\001\
\255\255\042\001\043\001\044\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\062\001\255\255\064\001\
\255\255\255\255\001\001\002\001\255\255\255\255\255\255\072\001\
\073\001\000\000\009\001\255\255\255\255\255\255\255\255\255\255\
\081\001\016\001\083\001\018\001\085\001\086\001\087\001\255\255\
\255\255\255\255\025\001\255\255\027\001\255\255\095\001\096\001\
\097\001\255\255\255\255\255\255\255\255\036\001\103\001\255\255\
\255\255\040\001\255\255\042\001\043\001\044\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\000\000\255\255\062\001\
\255\255\064\001\255\255\255\255\001\001\002\001\255\255\255\255\
\255\255\072\001\073\001\255\255\009\001\255\255\255\255\255\255\
\255\255\255\255\081\001\016\001\083\001\018\001\085\001\086\001\
\087\001\255\255\255\255\255\255\025\001\255\255\027\001\255\255\
\095\001\096\001\097\001\255\255\255\255\255\255\255\255\036\001\
\103\001\255\255\255\255\040\001\255\255\042\001\043\001\044\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\062\001\255\255\064\001\255\255\255\255\001\001\002\001\
\255\255\255\255\255\255\072\001\073\001\255\255\009\001\255\255\
\255\255\255\255\255\255\255\255\081\001\016\001\083\001\018\001\
\085\001\086\001\087\001\255\255\255\255\255\255\025\001\255\255\
\027\001\000\000\095\001\096\001\097\001\255\255\000\000\255\255\
\255\255\036\001\103\001\000\000\255\255\040\001\255\255\042\001\
\043\001\044\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\062\001\255\255\064\001\255\255\255\255\
\001\001\002\001\255\255\255\255\255\255\072\001\073\001\255\255\
\009\001\255\255\255\255\255\255\255\255\255\255\081\001\016\001\
\083\001\018\001\085\001\086\001\087\001\255\255\255\255\255\255\
\025\001\255\255\027\001\255\255\095\001\096\001\097\001\255\255\
\255\255\255\255\255\255\036\001\103\001\255\255\255\255\040\001\
\255\255\042\001\043\001\044\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\062\001\255\255\064\001\
\255\255\255\255\001\001\002\001\255\255\255\255\255\255\072\001\
\073\001\255\255\009\001\255\255\255\255\255\255\255\255\255\255\
\081\001\016\001\083\001\018\001\085\001\086\001\087\001\255\255\
\255\255\255\255\025\001\255\255\027\001\255\255\095\001\096\001\
\097\001\255\255\255\255\255\255\255\255\036\001\103\001\255\255\
\255\255\040\001\255\255\042\001\043\001\044\001\045\001\046\001\
\255\255\255\255\255\255\001\001\002\001\255\255\001\001\002\001\
\255\255\255\255\255\255\009\001\255\255\255\255\009\001\062\001\
\255\255\255\255\016\001\255\255\018\001\016\001\255\255\018\001\
\255\255\255\255\255\255\025\001\255\255\027\001\025\001\255\255\
\027\001\255\255\081\001\255\255\083\001\084\001\036\001\255\255\
\087\001\036\001\040\001\255\255\042\001\040\001\255\255\042\001\
\095\001\096\001\097\001\255\255\255\255\100\001\255\255\255\255\
\103\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\062\001\255\255\064\001\062\001\255\255\064\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\081\001\255\255\083\001\081\001\255\255\
\083\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\095\001\096\001\097\001\095\001\096\001\097\001\255\255\
\255\255\103\001\001\001\002\001\103\001\255\255\255\255\001\001\
\002\001\255\255\009\001\255\255\001\001\002\001\255\255\009\001\
\255\255\016\001\255\255\018\001\009\001\255\255\016\001\255\255\
\018\001\255\255\025\001\016\001\027\001\018\001\255\255\025\001\
\255\255\027\001\255\255\255\255\025\001\036\001\027\001\255\255\
\255\255\040\001\036\001\042\001\255\255\255\255\040\001\036\001\
\042\001\255\255\255\255\040\001\255\255\042\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\062\001\
\255\255\064\001\255\255\255\255\062\001\255\255\064\001\255\255\
\255\255\062\001\255\255\064\001\255\255\255\255\255\255\255\255\
\255\255\255\255\081\001\255\255\083\001\005\001\255\255\081\001\
\255\255\083\001\255\255\255\255\081\001\255\255\083\001\255\255\
\095\001\096\001\097\001\255\255\255\255\095\001\096\001\097\001\
\103\001\255\255\095\001\096\001\097\001\103\001\030\001\031\001\
\255\255\255\255\103\001\255\255\001\001\002\001\255\255\039\001\
\255\255\255\255\255\255\255\255\009\001\255\255\255\255\255\255\
\255\255\049\001\255\255\016\001\255\255\018\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\027\001\255\255\
\064\001\065\001\066\001\255\255\255\255\255\255\255\255\036\001\
\072\001\073\001\255\255\255\255\255\255\042\001\043\001\044\001\
\045\001\046\001\255\255\255\255\255\255\085\001\086\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\062\001\255\255\255\255\255\255\101\001\255\255\255\255\
\255\255\255\255\106\001\072\001\073\001\109\001\255\255\255\255\
\255\255\255\255\255\255\001\001\002\001\255\255\083\001\084\001\
\085\001\086\001\087\001\009\001\255\255\255\255\255\255\255\255\
\255\255\255\255\016\001\096\001\018\001\255\255\255\255\100\001\
\255\255\255\255\255\255\025\001\255\255\027\001\255\255\255\255\
\255\255\255\255\255\255\001\001\002\001\255\255\036\001\255\255\
\255\255\255\255\255\255\009\001\042\001\043\001\044\001\045\001\
\046\001\255\255\016\001\255\255\018\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\027\001\255\255\255\255\
\062\001\255\255\255\255\255\255\001\001\002\001\036\001\255\255\
\255\255\255\255\072\001\073\001\042\001\043\001\044\001\045\001\
\046\001\255\255\255\255\255\255\255\255\083\001\084\001\085\001\
\086\001\087\001\255\255\255\255\255\255\255\255\027\001\255\255\
\062\001\255\255\255\255\255\255\255\255\255\255\100\001\036\001\
\255\255\255\255\072\001\073\001\255\255\042\001\043\001\044\001\
\045\001\046\001\255\255\255\255\255\255\083\001\084\001\085\001\
\086\001\087\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\062\001\043\001\044\001\045\001\046\001\100\001\255\255\
\255\255\255\255\255\255\072\001\073\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\084\001\
\085\001\086\001\087\001\255\255\255\255\255\255\255\255\072\001\
\073\001\255\255\255\255\255\255\255\255\255\255\255\255\100\001\
\255\255\255\255\255\255\084\001\085\001\086\001\087\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\100\001"

let yynames_const = "\
  AMPERAMPER\000\
  AMPERSAND\000\
  AND\000\
  AS\000\
  ASSERT\000\
  BACKQUOTE\000\
  BANG\000\
  BAR\000\
  BARBAR\000\
  BARRBRACKET\000\
  BEGIN\000\
  CLASS\000\
  COLON\000\
  COLONCOLON\000\
  COLONEQUAL\000\
  COLONGREATER\000\
  COMMA\000\
  CONSTRAINT\000\
  DO\000\
  DONE\000\
  DOT\000\
  DOTDOT\000\
  DOWNTO\000\
  ELSE\000\
  END\000\
  EOF\000\
  EQUAL\000\
  EXCEPTION\000\
  EXTERNAL\000\
  FALSE\000\
  FOR\000\
  FUN\000\
  FUNCTION\000\
  FUNCTOR\000\
  GREATER\000\
  GREATERRBRACE\000\
  GREATERRBRACKET\000\
  IF\000\
  IN\000\
  INCLUDE\000\
  INHERIT\000\
  INITIALIZER\000\
  LAZY\000\
  LBRACE\000\
  LBRACELESS\000\
  LBRACKET\000\
  LBRACKETBAR\000\
  LBRACKETLESS\000\
  LBRACKETGREATER\000\
  LBRACKETPERCENT\000\
  LBRACKETPERCENTPERCENT\000\
  LESS\000\
  LESSMINUS\000\
  LET\000\
  LPAREN\000\
  LBRACKETAT\000\
  LBRACKETATAT\000\
  LBRACKETATATAT\000\
  MATCH\000\
  METHOD\000\
  MINUS\000\
  MINUSDOT\000\
  MINUSGREATER\000\
  MODULE\000\
  MUTABLE\000\
  NEW\000\
  OBJECT\000\
  OF\000\
  OPEN\000\
  OR\000\
  PERCENT\000\
  PLUS\000\
  PLUSDOT\000\
  PLUSEQ\000\
  PRIVATE\000\
  QUESTION\000\
  QUOTE\000\
  RBRACE\000\
  RBRACKET\000\
  REC\000\
  RPAREN\000\
  SEMI\000\
  SEMISEMI\000\
  SHARP\000\
  SIG\000\
  STAR\000\
  STRUCT\000\
  THEN\000\
  TILDE\000\
  TO\000\
  TRUE\000\
  TRY\000\
  TYPE\000\
  UNDERSCORE\000\
  VAL\000\
  VIRTUAL\000\
  WHEN\000\
  WHILE\000\
  WITH\000\
  EOL\000\
  "

let yynames_block = "\
  CHAR\000\
  FLOAT\000\
  INFIXOP0\000\
  INFIXOP1\000\
  INFIXOP2\000\
  INFIXOP3\000\
  INFIXOP4\000\
  INT\000\
  INT32\000\
  INT64\000\
  LABEL\000\
  LIDENT\000\
  NATIVEINT\000\
  OPTLABEL\000\
  PREFIXOP\000\
  STRING\000\
  UIDENT\000\
  COMMENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'structure) in
    Obj.repr(
# 324 "minParser.mly"
                                          ( _1 )
# 1172 "minParser.ml"
               : Parsetree.structure))
; (fun __caml_parser_env ->
    Obj.repr(
# 326 "minParser.mly"
                                          ( [] )
# 1178 "minParser.ml"
               : Parsetree.signature))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'top_structure) in
    Obj.repr(
# 328 "minParser.mly"
                                          ( Ptop_def _1 )
# 1185 "minParser.ml"
               : Parsetree.toplevel_phrase))
; (fun __caml_parser_env ->
    Obj.repr(
# 329 "minParser.mly"
                                          ( raise End_of_file )
# 1191 "minParser.ml"
               : Parsetree.toplevel_phrase))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 331 "minParser.mly"
                                          ( [mkstrexp _1 []] )
# 1198 "minParser.ml"
               : 'top_structure))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'top_structure_tail) in
    Obj.repr(
# 332 "minParser.mly"
                                          ( _1 )
# 1205 "minParser.ml"
               : 'top_structure))
; (fun __caml_parser_env ->
    Obj.repr(
# 334 "minParser.mly"
                                          ( [] )
# 1211 "minParser.ml"
               : 'top_structure_tail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'structure_item) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'top_structure_tail) in
    Obj.repr(
# 335 "minParser.mly"
                                          ( _1 :: _2 )
# 1219 "minParser.ml"
               : 'top_structure_tail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'use_file_tail) in
    Obj.repr(
# 337 "minParser.mly"
                                          ( _1 )
# 1226 "minParser.ml"
               : Parsetree.toplevel_phrase list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'seq_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'use_file_tail) in
    Obj.repr(
# 339 "minParser.mly"
                                          ( Ptop_def[mkstrexp _1 []] :: _2 )
# 1234 "minParser.ml"
               : Parsetree.toplevel_phrase list))
; (fun __caml_parser_env ->
    Obj.repr(
# 341 "minParser.mly"
                                          ( [] )
# 1240 "minParser.ml"
               : 'use_file_tail))
; (fun __caml_parser_env ->
    Obj.repr(
# 342 "minParser.mly"
                                          ( [] )
# 1246 "minParser.ml"
               : 'use_file_tail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'seq_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'use_file_tail) in
    Obj.repr(
# 344 "minParser.mly"
                                          ( Ptop_def[mkstrexp _2 []] :: _3 )
# 1254 "minParser.ml"
               : 'use_file_tail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'structure_item) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'use_file_tail) in
    Obj.repr(
# 345 "minParser.mly"
                                          ( Ptop_def[_2] :: _3 )
# 1262 "minParser.ml"
               : 'use_file_tail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'structure_item) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'use_file_tail) in
    Obj.repr(
# 346 "minParser.mly"
                                          ( Ptop_def[_1] :: _2 )
# 1270 "minParser.ml"
               : 'use_file_tail))
; (fun __caml_parser_env ->
    Obj.repr(
# 348 "minParser.mly"
                                          ( mktyp(Ptyp_any) )
# 1276 "minParser.ml"
               : Parsetree.core_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'seq_expr) in
    Obj.repr(
# 350 "minParser.mly"
                                          ( _1 )
# 1283 "minParser.ml"
               : Parsetree.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    Obj.repr(
# 352 "minParser.mly"
                                          ( _1 )
# 1290 "minParser.ml"
               : Parsetree.pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'seq_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'structure_tail) in
    Obj.repr(
# 356 "minParser.mly"
                                  ( mkstrexp _1 [] :: _2 )
# 1298 "minParser.ml"
               : 'structure))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'structure_tail) in
    Obj.repr(
# 357 "minParser.mly"
                                  ( _1 )
# 1305 "minParser.ml"
               : 'structure))
; (fun __caml_parser_env ->
    Obj.repr(
# 359 "minParser.mly"
                                  ( [] )
# 1311 "minParser.ml"
               : 'structure_tail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'structure) in
    Obj.repr(
# 360 "minParser.mly"
                                  ( _2 )
# 1318 "minParser.ml"
               : 'structure_tail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'structure_item) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'structure_tail) in
    Obj.repr(
# 361 "minParser.mly"
                                  ( _1 :: _2 )
# 1326 "minParser.ml"
               : 'structure_tail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'rec_flag) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'let_bindings) in
    Obj.repr(
# 364 "minParser.mly"
      (
        match _3 with
        | [ {pvb_pat = { ppat_desc = Ppat_any; ppat_loc = _ };
             pvb_expr = exp; pvb_attributes = attrs}] ->
            let exp = wrap_exp_attrs exp (None,[]) in
            mkstr(Pstr_eval (exp, attrs))
        | l ->
            mkstr(Pstr_value(_2, List.rev l))
      )
# 1342 "minParser.ml"
               : 'structure_item))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'mod_longident) in
    Obj.repr(
# 374 "minParser.mly"
      ( mkstr(Pstr_open(Opn.mk (mkrhs _2 3) ~loc:(symbol_rloc()))) )
# 1349 "minParser.ml"
               : 'structure_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 379 "minParser.mly"
                                  ( _1 )
# 1356 "minParser.ml"
               : 'seq_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 380 "minParser.mly"
                                  ( reloc_exp _1 )
# 1363 "minParser.ml"
               : 'seq_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 381 "minParser.mly"
                                  ( mkexp(Pexp_sequence(_1, _3)) )
# 1371 "minParser.ml"
               : 'seq_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 383 "minParser.mly"
                                         ( _1 )
# 1378 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_labeled_expr_list) in
    Obj.repr(
# 384 "minParser.mly"
                                         ( mkexp(Pexp_apply(_1, List.rev _2)) )
# 1386 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_comma_list) in
    Obj.repr(
# 385 "minParser.mly"
                                         ( mkexp(Pexp_tuple(List.rev _1)) )
# 1393 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'rec_flag) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'let_bindings) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 387 "minParser.mly"
      (
        let l = _3 in
        List.iter
          (fun vb ->
            if vb.pvb_attributes <> [] then
              raise Syntaxerr.(Error(Not_expecting(vb.pvb_loc,"item attribute")))
          )
         l;
        mkexp_attrs (Pexp_let(_2, List.rev l, _5)) (None, []) )
# 1410 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'seq_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 397 "minParser.mly"
      ( mkexp_attrs(Pexp_ifthenelse(_2, _4, Some _6)) (None, []) )
# 1419 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'seq_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 399 "minParser.mly"
      ( mkexp_attrs (Pexp_ifthenelse(_2, _4, None)) (None, []) )
# 1427 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 400 "minParser.mly"
                         ( mkinfix _1 _2 _3 )
# 1436 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 401 "minParser.mly"
                         ( mkinfix _1 _2 _3 )
# 1445 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 402 "minParser.mly"
                         ( mkinfix _1 _2 _3 )
# 1454 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 403 "minParser.mly"
                         ( mkinfix _1 _2 _3 )
# 1463 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 404 "minParser.mly"
                         ( mkinfix _1 _2 _3 )
# 1472 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 405 "minParser.mly"
                         ( mkinfix _1 "+" _3 )
# 1480 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 406 "minParser.mly"
                         ( mkinfix _1 "+." _3 )
# 1488 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 407 "minParser.mly"
                         ( mkinfix _1 "+=" _3 )
# 1496 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 408 "minParser.mly"
                         ( mkinfix _1 "-" _3 )
# 1504 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 409 "minParser.mly"
                         ( mkinfix _1 "-." _3 )
# 1512 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 410 "minParser.mly"
                         ( mkinfix _1 "*" _3 )
# 1520 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 411 "minParser.mly"
                         ( mkinfix _1 "%" _3 )
# 1528 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 412 "minParser.mly"
                         ( mkinfix _1 "=" _3 )
# 1536 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 413 "minParser.mly"
                         ( mkinfix _1 "<" _3 )
# 1544 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 414 "minParser.mly"
                         ( mkinfix _1 ">" _3 )
# 1552 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 415 "minParser.mly"
                         ( mkinfix _1 "or" _3 )
# 1560 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 416 "minParser.mly"
                         ( mkinfix _1 "||" _3 )
# 1568 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 417 "minParser.mly"
                         ( mkinfix _1 "&" _3 )
# 1576 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 418 "minParser.mly"
                         ( mkinfix _1 "&&" _3 )
# 1584 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 419 "minParser.mly"
                         ( mkinfix _1 ":=" _3 )
# 1592 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 420 "minParser.mly"
                                         ( mkuminus "-" _2 )
# 1599 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 421 "minParser.mly"
                                         ( mkuminus "-." _2 )
# 1606 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 422 "minParser.mly"
                                         ( mkuplus "+" _2 )
# 1613 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 423 "minParser.mly"
                                         ( mkuplus "+." _2 )
# 1620 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'seq_expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 426 "minParser.mly"
                                                     ( mkexp(Pexp_apply(ghexp(Pexp_ident(array_function "Array" "set")),
                                                                         ["",_1; "",_4; "",_7])) )
# 1630 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 428 "minParser.mly"
                                                     ( mkexp_attrs (Pexp_assert _2) (None, []) )
# 1637 "minParser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 430 "minParser.mly"
                                                     ( mkexp(Pexp_ident (mkrhs (Lident _1) 1)) )
# 1644 "minParser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mod_longident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 431 "minParser.mly"
                                                     ( mkexp(Pexp_ident (mkrhs (Ldot(_1, _3)) 1)) )
# 1652 "minParser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 432 "minParser.mly"
                                                     ( mkexp(Pexp_constant(Const_int _1)) )
# 1659 "minParser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * string option) in
    Obj.repr(
# 433 "minParser.mly"
                                                     ( mkexp(Pexp_constant(Const_string (fst _1, snd _1))) )
# 1666 "minParser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 434 "minParser.mly"
                                                     ( mkexp(Pexp_constant(Const_float _1)) )
# 1673 "minParser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constr_longident) in
    Obj.repr(
# 435 "minParser.mly"
                                                     ( mkexp(Pexp_construct(mkrhs _1 1, None)) )
# 1680 "minParser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'seq_expr) in
    Obj.repr(
# 436 "minParser.mly"
                                                     ( reloc_exp _2 )
# 1687 "minParser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'seq_expr) in
    Obj.repr(
# 437 "minParser.mly"
                                                     ( mkexp(Pexp_apply(ghexp(Pexp_ident(array_function "Array" "get")),
                                                       ["",_1; "",_4])) )
# 1696 "minParser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'labeled_simple_expr) in
    Obj.repr(
# 440 "minParser.mly"
                                                     ( [_1] )
# 1703 "minParser.ml"
               : 'simple_labeled_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_labeled_expr_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'labeled_simple_expr) in
    Obj.repr(
# 441 "minParser.mly"
                                                     ( _2 :: _1 )
# 1711 "minParser.ml"
               : 'simple_labeled_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 443 "minParser.mly"
                                  ( ("", _1) )
# 1718 "minParser.ml"
               : 'labeled_simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fun_binding) in
    Obj.repr(
# 445 "minParser.mly"
                                  ( [Vb.mk ~loc:(symbol_rloc()) (mkpatvar _1 1) _2] )
# 1726 "minParser.ml"
               : 'let_bindings))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 446 "minParser.mly"
                                  ( [Vb.mk ~loc:(symbol_rloc()) _1 _3] )
# 1734 "minParser.ml"
               : 'let_bindings))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 449 "minParser.mly"
                                  ( _2 )
# 1741 "minParser.ml"
               : 'fun_binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_pattern) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fun_binding) in
    Obj.repr(
# 450 "minParser.mly"
                                  ( ghexp(Pexp_fun("", None, _1, _2)) )
# 1749 "minParser.ml"
               : 'fun_binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_comma_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 452 "minParser.mly"
                                  ( _3 :: _1 )
# 1757 "minParser.ml"
               : 'expr_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 453 "minParser.mly"
                                  ( [_3; _1] )
# 1765 "minParser.ml"
               : 'expr_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_pattern) in
    Obj.repr(
# 458 "minParser.mly"
                                                ( _1 )
# 1772 "minParser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_comma_list) in
    Obj.repr(
# 459 "minParser.mly"
                                                ( mkpat(Ppat_tuple(List.rev _1)) )
# 1779 "minParser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 461 "minParser.mly"
                                                ( mkpat(Ppat_var (mkrhs _1 1)) )
# 1786 "minParser.ml"
               : 'simple_pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 462 "minParser.mly"
                                                ( mkpat(Ppat_any) )
# 1792 "minParser.ml"
               : 'simple_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constr_longident) in
    Obj.repr(
# 463 "minParser.mly"
                                                ( mkpat(Ppat_construct(mkrhs _1 1, None)) )
# 1799 "minParser.ml"
               : 'simple_pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    Obj.repr(
# 464 "minParser.mly"
                                                ( reloc_pat _2 )
# 1806 "minParser.ml"
               : 'simple_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_comma_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 467 "minParser.mly"
                                                ( _3 :: _1 )
# 1814 "minParser.ml"
               : 'pattern_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 468 "minParser.mly"
                                                ( [_3; _1] )
# 1822 "minParser.ml"
               : 'pattern_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mod_longident) in
    Obj.repr(
# 473 "minParser.mly"
                                                ( _1 )
# 1829 "minParser.ml"
               : 'constr_longident))
; (fun __caml_parser_env ->
    Obj.repr(
# 474 "minParser.mly"
                                                ( Lident "()" )
# 1835 "minParser.ml"
               : 'constr_longident))
; (fun __caml_parser_env ->
    Obj.repr(
# 475 "minParser.mly"
                                                ( Lident "false" )
# 1841 "minParser.ml"
               : 'constr_longident))
; (fun __caml_parser_env ->
    Obj.repr(
# 476 "minParser.mly"
                                                ( Lident "true" )
# 1847 "minParser.ml"
               : 'constr_longident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 478 "minParser.mly"
                                                ( Lident _1 )
# 1854 "minParser.ml"
               : 'mod_longident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mod_longident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 479 "minParser.mly"
                                                ( Ldot(_1, _3) )
# 1862 "minParser.ml"
               : 'mod_longident))
; (fun __caml_parser_env ->
    Obj.repr(
# 484 "minParser.mly"
                                                ( Nonrecursive )
# 1868 "minParser.ml"
               : 'rec_flag))
; (fun __caml_parser_env ->
    Obj.repr(
# 485 "minParser.mly"
                                                ( Recursive )
# 1874 "minParser.ml"
               : 'rec_flag))
(* Entry implementation *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry interface *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry toplevel_phrase *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry use_file *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry parse_core_type *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry parse_expression *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry parse_pattern *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let implementation (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Parsetree.structure)
let interface (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Parsetree.signature)
let toplevel_phrase (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Parsetree.toplevel_phrase)
let use_file (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 4 lexfun lexbuf : Parsetree.toplevel_phrase list)
let parse_core_type (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 5 lexfun lexbuf : Parsetree.core_type)
let parse_expression (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 6 lexfun lexbuf : Parsetree.expression)
let parse_pattern (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 7 lexfun lexbuf : Parsetree.pattern)
;;
