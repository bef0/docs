type token =
  | INT of (int)
  | IDENT of (string)
  | EQ of (string)
  | LET of (string)
  | IN of (string)
  | COM of (string)
  | FCOM of (string)
  | MATCH of (string)
  | WITH of (string)
  | BAR of (string)
  | LPAREN of (string)
  | RPAREN of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open E

# 22 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* IDENT *);
  259 (* EQ *);
  260 (* LET *);
  261 (* IN *);
  262 (* COM *);
  263 (* FCOM *);
  264 (* MATCH *);
  265 (* WITH *);
  266 (* BAR *);
  267 (* LPAREN *);
  268 (* RPAREN *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\003\000\003\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\004\000\004\000\004\000\005\000\
\005\000\000\000"

let yylen = "\002\000\
\001\000\001\000\003\000\001\000\002\000\002\000\001\000\002\000\
\006\000\004\000\004\000\001\000\001\000\002\000\001\000\002\000\
\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\012\000\001\000\000\000\002\000\000\000\000\000\
\000\000\018\000\000\000\000\000\000\000\006\000\000\000\000\000\
\008\000\005\000\000\000\000\000\003\000\000\000\000\000\000\000\
\010\000\015\000\000\000\000\000\014\000\009\000\017\000"

let yydgoto = "\002\000\
\012\000\011\000\013\000\025\000\026\000"

let yysindex = "\002\000\
\035\255\000\000\000\000\000\000\035\255\000\000\035\255\035\255\
\035\255\000\000\035\255\035\255\002\255\000\000\254\254\252\254\
\000\000\000\000\035\255\023\255\000\000\004\255\035\255\003\255\
\000\000\000\000\035\255\003\255\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\024\000\032\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\000\000\000\000\000\000\014\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\009\000\000\000\248\255\000\000\234\255"

let yytablesize = 300
let yytable = "\015\000\
\013\000\029\000\001\000\018\000\019\000\031\000\020\000\021\000\
\027\000\010\000\022\000\024\000\023\000\016\000\028\000\014\000\
\000\000\016\000\030\000\017\000\000\000\000\000\003\000\007\000\
\004\000\000\000\005\000\000\000\006\000\007\000\008\000\004\000\
\023\000\009\000\003\000\000\000\004\000\000\000\005\000\000\000\
\006\000\007\000\008\000\000\000\000\000\009\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\013\000\000\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\000\000\013\000\013\000\016\000\000\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\000\000\
\016\000\016\000\007\000\000\000\007\000\000\000\000\000\000\000\
\007\000\007\000\004\000\007\000\004\000\000\000\000\000\000\000\
\004\000\004\000\000\000\004\000"

let yycheck = "\008\000\
\000\000\024\000\001\000\012\000\003\001\028\000\009\001\012\001\
\005\001\001\000\019\000\020\000\010\001\000\000\023\000\007\000\
\255\255\009\000\027\000\011\000\255\255\255\255\000\001\000\000\
\002\001\255\255\004\001\255\255\006\001\007\001\008\001\000\000\
\010\001\011\001\000\001\255\255\002\001\255\255\004\001\255\255\
\006\001\007\001\008\001\255\255\255\255\011\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\001\255\255\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\255\255\011\001\012\001\000\001\255\255\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\255\255\
\011\001\012\001\003\001\255\255\005\001\255\255\255\255\255\255\
\009\001\010\001\003\001\012\001\005\001\255\255\255\255\255\255\
\009\001\010\001\255\255\012\001"

let yynames_const = "\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  IDENT\000\
  EQ\000\
  LET\000\
  IN\000\
  COM\000\
  FCOM\000\
  MATCH\000\
  WITH\000\
  BAR\000\
  LPAREN\000\
  RPAREN\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 29 "parser.mly"
        ( Tok(_1) )
# 183 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 30 "parser.mly"
      ( RCom(_1) )
# 190 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : E.e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 31 "parser.mly"
                    ( Paren(_1,_2,_3))
# 199 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : E.e) in
    Obj.repr(
# 33 "parser.mly"
      ( [_1] )
# 206 "parser.ml"
               : 'exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : E.e) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exps) in
    Obj.repr(
# 34 "parser.mly"
           ( _1::_2 )
# 214 "parser.ml"
               : 'exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : E.e) in
    Obj.repr(
# 36 "parser.mly"
           ( FCom(_1, _2) )
# 222 "parser.ml"
               : E.e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 37 "parser.mly"
             ( _1 )
# 229 "parser.ml"
               : E.e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : E.e) in
    Obj.repr(
# 38 "parser.mly"
                 ( Cons(_1, _2) )
# 237 "parser.ml"
               : E.e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'exps) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exps) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exps) in
    Obj.repr(
# 39 "parser.mly"
                                          ( Let(Tok _1 :: _2@[Tok _3], _4@[Tok "in"], _6) )
# 249 "parser.ml"
               : E.e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'exps) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'case) in
    Obj.repr(
# 40 "parser.mly"
                                      ( Match(Tok _1 :: _2 @ [Tok "with"], _4) )
# 259 "parser.ml"
               : E.e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'exps) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'case) in
    Obj.repr(
# 41 "parser.mly"
                                      ( Match(Tok _1 :: _2 @ [Tok "with"], _4) )
# 269 "parser.ml"
               : E.e))
; (fun __caml_parser_env ->
    Obj.repr(
# 43 "parser.mly"
    ( failwith
    (Printf.sprintf "parse error near characters %d-%d"
       (Parsing.symbol_start ())
       (Parsing.symbol_end ())) )
# 278 "parser.ml"
               : E.e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exps) in
    Obj.repr(
# 49 "parser.mly"
       ( [_1] )
# 285 "parser.ml"
               : 'case))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exps) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cases) in
    Obj.repr(
# 50 "parser.mly"
             ( (_1)::_2 )
# 293 "parser.ml"
               : 'case))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cases) in
    Obj.repr(
# 51 "parser.mly"
        ( _1 )
# 300 "parser.ml"
               : 'case))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exps) in
    Obj.repr(
# 54 "parser.mly"
           ( [Tok"|"::_2] )
# 308 "parser.ml"
               : 'cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exps) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cases) in
    Obj.repr(
# 55 "parser.mly"
                 ( (Tok"|"::_2) :: _3 )
# 317 "parser.ml"
               : 'cases))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : E.e)
