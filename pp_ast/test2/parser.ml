type token =
  | INT of (int)
  | ID of (string)
  | SUB
  | ADD
  | SEMICOLON
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | PRINT
  | EOF
  | COLON
  | COMMA
  | ASSIGN
  | RETURN
  | INCLUDE of (string)
  | STRING of (string)
  | STRUCT
  | THIS
  | DOT
  | IF
  | ELSE
  | IMPLEMENT
  | RIMPLEMENT
  | TRAIT
  | ARROW
  | MEMBER
  | LT
  | GT
  | LE
  | GE
  | MUL
  | AMP
  | DIV
  | CAST
  | NEW
  | AT

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Syntax
open Ty
open Stmt
open Exp
# 48 "parser.ml"
let yytransl_const = [|
  259 (* SUB *);
  260 (* ADD *);
  261 (* SEMICOLON *);
  262 (* LPAREN *);
  263 (* RPAREN *);
  264 (* LBRACE *);
  265 (* RBRACE *);
  266 (* PRINT *);
    0 (* EOF *);
  267 (* COLON *);
  268 (* COMMA *);
  269 (* ASSIGN *);
  270 (* RETURN *);
  273 (* STRUCT *);
  274 (* THIS *);
  275 (* DOT *);
  276 (* IF *);
  277 (* ELSE *);
  278 (* IMPLEMENT *);
  279 (* RIMPLEMENT *);
  280 (* TRAIT *);
  281 (* ARROW *);
  282 (* MEMBER *);
  283 (* LT *);
  284 (* GT *);
  285 (* LE *);
  286 (* GE *);
  287 (* MUL *);
  288 (* AMP *);
  289 (* DIV *);
  290 (* CAST *);
  291 (* NEW *);
  292 (* AT *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* ID *);
  271 (* INCLUDE *);
  272 (* STRING *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\005\000\
\005\000\005\000\007\000\007\000\006\000\006\000\001\000\001\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\010\000\010\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\011\000\011\000\012\000\012\000\004\000\004\000\004\000\
\014\000\014\000\013\000\013\000\013\000\013\000\013\000\000\000"

let yylen = "\002\000\
\003\000\001\000\001\000\001\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000\002\000\002\000\002\000\003\000\007\000\001\000\003\000\
\004\000\005\000\001\000\003\000\001\000\003\000\001\000\002\000\
\001\000\001\000\002\000\001\000\002\000\003\000\005\000\007\000\
\001\000\002\000\001\000\007\000\008\000\006\000\003\000\005\000\
\004\000\005\000\004\000\005\000\005\000\006\000\005\000\006\000\
\006\000\003\000\005\000\001\000\002\000\002\000\001\000\004\000\
\001\000\003\000\007\000\006\000\003\000\008\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\002\000\000\000\000\000\000\000\000\000\043\000\
\003\000\000\000\000\000\000\000\000\000\000\000\072\000\005\000\
\000\000\023\000\000\000\034\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\037\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\032\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\001\000\038\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\063\000\021\000\000\000\000\000\000\000\025\000\000\000\000\000\
\000\000\000\000\062\000\000\000\000\000\051\000\000\000\071\000\
\000\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\000\000\000\000\000\000\000\000\000\030\000\026\000\
\000\000\000\000\000\000\000\000\052\000\000\000\000\000\050\000\
\061\000\000\000\000\000\000\000\053\000\000\000\000\000\055\000\
\000\000\000\000\000\000\000\000\000\000\046\000\064\000\000\000\
\069\000\000\000\000\000\042\000\056\000\054\000\057\000\000\000\
\000\000\059\000\044\000\000\000\000\000\000\000\000\000\000\000\
\000\000\040\000\022\000\045\000\000\000\000\000\000\000\000\000\
\064\000\066\000\000\000\000\000\000\000\000\000\067\000\000\000\
\000\000\028\000\070\000"

let yydgoto = "\002\000\
\015\000\016\000\017\000\150\000\018\000\054\000\166\000\019\000\
\020\000\124\000\055\000\100\000\101\000\151\000"

let yysindex = "\012\000\
\103\255\000\000\000\000\202\002\152\255\071\255\152\255\000\000\
\000\000\013\255\152\255\152\255\152\255\152\255\000\000\000\000\
\153\003\000\000\103\255\000\000\120\255\001\255\091\255\032\255\
\112\255\102\255\078\255\178\255\000\000\107\255\153\003\152\255\
\048\255\153\003\048\255\113\255\152\255\152\255\127\255\152\255\
\152\255\152\255\152\255\152\255\152\255\152\255\152\255\152\255\
\027\255\000\000\051\255\121\255\213\255\059\255\124\255\134\255\
\126\255\027\255\131\255\076\255\128\255\133\255\092\255\021\255\
\141\255\000\000\000\000\089\003\082\255\082\255\125\255\153\003\
\113\255\113\255\145\002\145\002\145\002\145\002\048\255\048\255\
\000\000\000\000\027\255\143\255\152\255\000\000\153\255\148\255\
\152\255\136\255\000\000\152\255\151\255\000\000\156\255\000\000\
\154\255\000\000\160\255\155\255\021\255\007\255\087\255\007\255\
\161\255\000\000\103\255\165\255\157\255\162\255\000\000\000\000\
\169\255\167\255\176\255\153\003\000\000\050\255\188\255\000\000\
\000\000\239\002\007\255\171\255\000\000\172\255\183\255\000\000\
\173\255\187\255\188\255\103\255\182\255\000\000\000\000\024\255\
\000\000\189\255\118\255\000\000\000\000\000\000\000\000\103\255\
\191\255\000\000\000\000\103\255\174\255\190\255\193\255\192\255\
\121\255\000\000\000\000\000\000\199\255\027\255\185\255\211\255\
\000\000\000\000\212\255\078\255\203\255\205\255\000\000\211\255\
\103\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\080\001\000\000\000\000\070\003\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\196\002\000\000\002\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\000\000\000\000\000\000\233\002\000\000\
\149\000\085\002\186\000\038\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\121\003\223\000\214\255\000\000\000\000\159\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\117\001\154\001\000\000\122\002\
\075\000\112\000\191\001\228\001\011\002\048\002\006\001\043\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\210\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\215\255\000\000\000\000\000\000\
\000\000\000\000\000\000\014\003\000\000\000\000\000\000\000\000\
\000\000\000\000\218\255\000\000\000\000\000\000\000\000\000\000\
\051\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\221\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\216\255\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\057\000\000\000\003\000\234\255\108\255\231\255\052\000\177\255\
\158\255\170\255\207\255\197\255\000\000\072\000"

let yytablesize = 1211
let yytable = "\059\000\
\004\000\031\000\056\000\123\000\105\000\123\000\057\000\028\000\
\122\000\031\000\095\000\165\000\001\000\033\000\034\000\035\000\
\036\000\127\000\032\000\165\000\096\000\008\000\097\000\053\000\
\123\000\081\000\082\000\129\000\081\000\057\000\149\000\058\000\
\057\000\062\000\068\000\091\000\140\000\020\000\099\000\069\000\
\070\000\121\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\081\000\147\000\126\000\058\000\136\000\
\065\000\058\000\039\000\111\000\109\000\083\000\030\000\114\000\
\154\000\086\000\041\000\053\000\156\000\138\000\087\000\003\000\
\004\000\042\000\011\000\050\000\005\000\093\000\006\000\029\000\
\058\000\146\000\094\000\065\000\007\000\008\000\009\000\053\000\
\093\000\171\000\010\000\053\000\039\000\125\000\116\000\137\000\
\060\000\103\000\061\000\104\000\041\000\011\000\012\000\003\000\
\004\000\013\000\014\000\042\000\005\000\064\000\006\000\012\000\
\047\000\063\000\048\000\067\000\007\000\008\000\009\000\093\000\
\003\000\051\000\010\000\039\000\153\000\005\000\052\000\096\000\
\071\000\097\000\088\000\084\000\090\000\011\000\012\000\009\000\
\098\000\013\000\014\000\089\000\102\000\003\000\027\000\092\000\
\110\000\099\000\005\000\106\000\018\000\108\000\011\000\012\000\
\003\000\027\000\013\000\014\000\009\000\005\000\113\000\112\000\
\115\000\083\000\117\000\120\000\118\000\119\000\130\000\009\000\
\131\000\128\000\133\000\011\000\012\000\134\000\132\000\013\000\
\014\000\135\000\142\000\141\000\037\000\038\000\011\000\012\000\
\066\000\019\000\013\000\014\000\039\000\093\000\040\000\143\000\
\145\000\144\000\148\000\152\000\041\000\155\000\157\000\159\000\
\161\000\158\000\160\000\042\000\043\000\044\000\045\000\046\000\
\047\000\163\000\048\000\049\000\164\000\167\000\168\000\037\000\
\038\000\169\000\060\000\170\000\029\000\058\000\024\000\039\000\
\085\000\040\000\041\000\065\000\027\000\162\000\000\000\041\000\
\000\000\000\000\000\000\000\000\000\000\000\000\042\000\043\000\
\044\000\045\000\046\000\047\000\000\000\048\000\049\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\004\000\004\000\004\000\004\000\004\000\009\000\000\000\004\000\
\004\000\004\000\031\000\004\000\004\000\004\000\004\000\004\000\
\004\000\000\000\004\000\004\000\004\000\004\000\000\000\000\000\
\000\000\000\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\020\000\020\000\020\000\
\020\000\020\000\010\000\020\000\020\000\020\000\020\000\000\000\
\000\000\020\000\020\000\020\000\020\000\020\000\000\000\020\000\
\020\000\020\000\020\000\000\000\000\000\000\000\000\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\011\000\011\000\011\000\011\000\011\000\004\000\
\011\000\011\000\011\000\011\000\000\000\000\000\011\000\011\000\
\011\000\011\000\011\000\000\000\011\000\011\000\011\000\011\000\
\000\000\000\000\000\000\000\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\012\000\
\012\000\012\000\012\000\012\000\008\000\012\000\012\000\012\000\
\012\000\000\000\000\000\012\000\012\000\012\000\012\000\012\000\
\000\000\012\000\012\000\012\000\012\000\000\000\000\000\000\000\
\000\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\018\000\018\000\018\000\018\000\
\018\000\007\000\018\000\018\000\018\000\018\000\000\000\000\000\
\018\000\018\000\018\000\018\000\018\000\000\000\018\000\000\000\
\018\000\018\000\000\000\000\000\000\000\000\000\000\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\019\000\019\000\019\000\019\000\019\000\013\000\019\000\
\019\000\019\000\019\000\000\000\000\000\019\000\019\000\019\000\
\019\000\019\000\000\000\019\000\000\000\019\000\019\000\000\000\
\000\000\000\000\000\000\000\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\024\000\024\000\
\024\000\024\000\024\000\014\000\024\000\000\000\024\000\024\000\
\000\000\000\000\000\000\024\000\024\000\024\000\024\000\000\000\
\024\000\024\000\024\000\024\000\000\000\000\000\000\000\000\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\000\000\000\000\009\000\009\000\009\000\
\009\000\009\000\015\000\009\000\009\000\009\000\009\000\000\000\
\000\000\009\000\009\000\009\000\009\000\009\000\000\000\009\000\
\000\000\009\000\009\000\000\000\000\000\000\000\000\000\000\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\010\000\010\000\010\000\010\000\010\000\016\000\
\010\000\010\000\010\000\010\000\000\000\000\000\010\000\010\000\
\010\000\010\000\010\000\000\000\010\000\000\000\010\000\010\000\
\000\000\000\000\000\000\000\000\000\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\004\000\
\004\000\004\000\004\000\004\000\017\000\000\000\000\000\004\000\
\004\000\000\000\000\000\000\000\004\000\004\000\004\000\004\000\
\000\000\004\000\004\000\004\000\004\000\000\000\000\000\000\000\
\000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\008\000\008\000\008\000\008\000\
\008\000\006\000\008\000\008\000\008\000\008\000\000\000\000\000\
\008\000\008\000\008\000\008\000\008\000\000\000\008\000\000\000\
\008\000\008\000\000\000\000\000\000\000\000\000\000\000\008\000\
\008\000\008\000\008\000\000\000\008\000\000\000\008\000\008\000\
\008\000\007\000\007\000\007\000\007\000\007\000\047\000\007\000\
\007\000\007\000\007\000\000\000\000\000\007\000\007\000\007\000\
\007\000\007\000\000\000\007\000\000\000\007\000\007\000\000\000\
\000\000\000\000\000\000\000\000\007\000\007\000\007\000\007\000\
\000\000\007\000\000\000\007\000\007\000\007\000\013\000\013\000\
\013\000\000\000\000\000\033\000\013\000\013\000\013\000\013\000\
\000\000\000\000\013\000\013\000\013\000\013\000\013\000\000\000\
\013\000\000\000\013\000\013\000\000\000\000\000\000\000\000\000\
\000\000\013\000\013\000\013\000\013\000\000\000\013\000\000\000\
\013\000\013\000\013\000\014\000\014\000\014\000\000\000\000\000\
\035\000\014\000\014\000\014\000\014\000\000\000\000\000\014\000\
\014\000\014\000\014\000\014\000\000\000\014\000\000\000\014\000\
\014\000\000\000\000\000\000\000\000\000\000\000\014\000\014\000\
\014\000\014\000\000\000\014\000\000\000\014\000\014\000\014\000\
\000\000\000\000\015\000\015\000\015\000\048\000\000\000\000\000\
\015\000\015\000\015\000\015\000\000\000\000\000\015\000\015\000\
\015\000\015\000\015\000\000\000\015\000\000\000\015\000\015\000\
\000\000\000\000\000\000\000\000\000\000\015\000\015\000\015\000\
\015\000\000\000\015\000\000\000\015\000\015\000\015\000\016\000\
\016\000\016\000\039\000\000\000\000\000\016\000\016\000\016\000\
\016\000\000\000\000\000\016\000\016\000\016\000\016\000\016\000\
\000\000\016\000\000\000\016\000\016\000\036\000\000\000\000\000\
\000\000\000\000\016\000\016\000\016\000\016\000\000\000\016\000\
\000\000\016\000\016\000\016\000\017\000\017\000\017\000\000\000\
\000\000\000\000\017\000\017\000\017\000\017\000\000\000\000\000\
\017\000\000\000\017\000\017\000\017\000\000\000\017\000\000\000\
\017\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\017\000\000\000\000\000\017\000\
\017\000\006\000\006\000\006\000\000\000\000\000\000\000\006\000\
\006\000\006\000\006\000\000\000\000\000\006\000\000\000\006\000\
\006\000\006\000\000\000\006\000\000\000\006\000\006\000\000\000\
\000\000\000\000\000\000\037\000\038\000\000\000\000\000\000\000\
\000\000\006\000\000\000\039\000\006\000\006\000\047\000\047\000\
\047\000\000\000\000\000\041\000\000\000\000\000\047\000\047\000\
\000\000\000\000\042\000\063\000\047\000\047\000\047\000\047\000\
\047\000\048\000\047\000\047\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\047\000\047\000\000\000\
\000\000\047\000\047\000\033\000\033\000\033\000\000\000\000\000\
\000\000\033\000\000\000\033\000\033\000\000\000\000\000\021\000\
\000\000\033\000\033\000\033\000\022\000\033\000\000\000\033\000\
\033\000\000\000\023\000\000\000\000\000\000\000\000\000\024\000\
\025\000\026\000\000\000\033\000\000\000\000\000\033\000\033\000\
\035\000\035\000\035\000\000\000\000\000\000\000\035\000\000\000\
\035\000\035\000\000\000\000\000\139\000\000\000\035\000\035\000\
\035\000\022\000\035\000\000\000\035\000\035\000\000\000\023\000\
\000\000\000\000\000\000\000\000\024\000\025\000\026\000\000\000\
\035\000\000\000\000\000\035\000\035\000\048\000\048\000\048\000\
\000\000\000\000\000\000\048\000\000\000\048\000\048\000\000\000\
\000\000\000\000\000\000\048\000\048\000\048\000\000\000\048\000\
\000\000\048\000\048\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\048\000\000\000\000\000\
\048\000\048\000\039\000\039\000\039\000\000\000\000\000\000\000\
\039\000\000\000\039\000\039\000\000\000\000\000\000\000\000\000\
\039\000\039\000\039\000\000\000\039\000\036\000\039\000\000\000\
\000\000\000\000\000\000\000\000\000\000\036\000\036\000\000\000\
\000\000\039\000\039\000\036\000\036\000\039\000\039\000\036\000\
\000\000\036\000\036\000\037\000\038\000\000\000\000\000\107\000\
\000\000\000\000\000\000\039\000\000\000\040\000\000\000\000\000\
\000\000\000\000\000\000\041\000\000\000\000\000\000\000\000\000\
\000\000\000\000\042\000\043\000\044\000\045\000\046\000\047\000\
\000\000\048\000\049\000\004\000\004\000\000\000\000\000\004\000\
\000\000\000\000\000\000\000\000\004\000\004\000\000\000\000\000\
\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\
\000\000\000\000\004\000\004\000\004\000\004\000\004\000\004\000\
\000\000\004\000\004\000\037\000\038\000\000\000\000\000\000\000\
\000\000\000\000\000\000\039\000\000\000\040\000\000\000\000\000\
\000\000\000\000\000\000\041\000\000\000\000\000\000\000\000\000\
\000\000\000\000\042\000\043\000\044\000\045\000\046\000\047\000\
\000\000\048\000\049\000"

let yycheck = "\022\000\
\000\000\000\000\002\001\102\000\064\000\104\000\006\001\005\000\
\002\001\007\000\060\000\160\000\001\000\011\000\012\000\013\000\
\014\000\104\000\006\001\168\000\000\001\015\001\002\001\021\000\
\123\000\002\001\049\000\107\000\002\001\006\001\007\001\031\001\
\006\001\002\001\032\000\058\000\123\000\000\000\018\001\037\000\
\038\000\101\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\048\000\002\001\132\000\103\000\031\001\006\001\
\006\001\031\001\011\001\085\000\083\000\011\001\006\000\089\000\
\144\000\007\001\019\001\065\000\148\000\119\000\012\001\001\001\
\002\001\026\001\000\000\019\000\006\001\002\001\008\001\009\001\
\031\001\131\000\007\001\006\001\014\001\015\001\016\001\085\000\
\002\001\169\000\020\001\089\000\011\001\007\001\092\000\118\000\
\006\001\006\001\008\001\008\001\019\001\031\001\032\001\001\001\
\002\001\035\001\036\001\026\001\006\001\008\001\008\001\000\000\
\031\001\002\001\033\001\009\001\014\001\015\001\016\001\002\001\
\001\001\002\001\020\001\011\001\007\001\006\001\007\001\000\001\
\002\001\002\001\007\001\011\001\007\001\031\001\032\001\016\001\
\009\001\035\001\036\001\006\001\008\001\001\001\002\001\013\001\
\002\001\018\001\006\001\007\001\000\000\025\001\031\001\032\001\
\001\001\002\001\035\001\036\001\016\001\006\001\011\001\007\001\
\025\001\011\001\007\001\009\001\011\001\006\001\002\001\016\001\
\012\001\009\001\002\001\031\001\032\001\007\001\013\001\035\001\
\036\001\002\001\007\001\009\001\003\001\004\001\031\001\032\001\
\007\001\000\000\035\001\036\001\011\001\002\001\013\001\009\001\
\006\001\021\001\013\001\007\001\019\001\007\001\025\001\007\001\
\002\001\012\001\011\001\026\001\027\001\028\001\029\001\030\001\
\031\001\025\001\033\001\034\001\002\001\002\001\012\001\003\001\
\004\001\013\001\009\001\168\000\007\001\007\001\000\000\011\001\
\012\001\013\001\009\001\007\001\013\001\158\000\255\255\019\001\
\255\255\255\255\255\255\255\255\255\255\255\255\026\001\027\001\
\028\001\029\001\030\001\031\001\255\255\033\001\034\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\001\001\001\002\001\003\001\004\001\000\000\255\255\007\001\
\008\001\009\001\009\001\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\000\001\001\001\002\001\
\003\001\004\001\000\000\006\001\007\001\008\001\009\001\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\019\001\020\001\021\001\255\255\255\255\255\255\255\255\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\000\001\001\001\002\001\003\001\004\001\000\000\
\006\001\007\001\008\001\009\001\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\255\255\018\001\019\001\020\001\021\001\
\255\255\255\255\255\255\255\255\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\000\001\
\001\001\002\001\003\001\004\001\000\000\006\001\007\001\008\001\
\009\001\255\255\255\255\012\001\013\001\014\001\015\001\016\001\
\255\255\018\001\019\001\020\001\021\001\255\255\255\255\255\255\
\255\255\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\000\001\001\001\002\001\003\001\
\004\001\000\000\006\001\007\001\008\001\009\001\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\255\255\018\001\255\255\
\020\001\021\001\255\255\255\255\255\255\255\255\255\255\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\000\001\001\001\002\001\003\001\004\001\000\000\006\001\
\007\001\008\001\009\001\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\255\255\018\001\255\255\020\001\021\001\255\255\
\255\255\255\255\255\255\255\255\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\000\001\001\001\
\002\001\003\001\004\001\000\000\006\001\255\255\008\001\009\001\
\255\255\255\255\255\255\013\001\014\001\015\001\016\001\255\255\
\018\001\019\001\020\001\021\001\255\255\255\255\255\255\255\255\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\255\255\255\255\000\001\001\001\002\001\
\003\001\004\001\000\000\006\001\007\001\008\001\009\001\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\255\255\020\001\021\001\255\255\255\255\255\255\255\255\255\255\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\000\001\001\001\002\001\003\001\004\001\000\000\
\006\001\007\001\008\001\009\001\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\255\255\018\001\255\255\020\001\021\001\
\255\255\255\255\255\255\255\255\255\255\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\000\001\
\001\001\002\001\003\001\004\001\000\000\255\255\255\255\008\001\
\009\001\255\255\255\255\255\255\013\001\014\001\015\001\016\001\
\255\255\018\001\019\001\020\001\021\001\255\255\255\255\255\255\
\255\255\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\000\001\001\001\002\001\003\001\
\004\001\000\000\006\001\007\001\008\001\009\001\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\255\255\018\001\255\255\
\020\001\021\001\255\255\255\255\255\255\255\255\255\255\027\001\
\028\001\029\001\030\001\255\255\032\001\255\255\034\001\035\001\
\036\001\000\001\001\001\002\001\003\001\004\001\000\000\006\001\
\007\001\008\001\009\001\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\255\255\018\001\255\255\020\001\021\001\255\255\
\255\255\255\255\255\255\255\255\027\001\028\001\029\001\030\001\
\255\255\032\001\255\255\034\001\035\001\036\001\000\001\001\001\
\002\001\255\255\255\255\000\000\006\001\007\001\008\001\009\001\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\255\255\
\018\001\255\255\020\001\021\001\255\255\255\255\255\255\255\255\
\255\255\027\001\028\001\029\001\030\001\255\255\032\001\255\255\
\034\001\035\001\036\001\000\001\001\001\002\001\255\255\255\255\
\000\000\006\001\007\001\008\001\009\001\255\255\255\255\012\001\
\013\001\014\001\015\001\016\001\255\255\018\001\255\255\020\001\
\021\001\255\255\255\255\255\255\255\255\255\255\027\001\028\001\
\029\001\030\001\255\255\032\001\255\255\034\001\035\001\036\001\
\255\255\255\255\000\001\001\001\002\001\000\000\255\255\255\255\
\006\001\007\001\008\001\009\001\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\255\255\018\001\255\255\020\001\021\001\
\255\255\255\255\255\255\255\255\255\255\027\001\028\001\029\001\
\030\001\255\255\032\001\255\255\034\001\035\001\036\001\000\001\
\001\001\002\001\000\000\255\255\255\255\006\001\007\001\008\001\
\009\001\255\255\255\255\012\001\013\001\014\001\015\001\016\001\
\255\255\018\001\255\255\020\001\021\001\000\000\255\255\255\255\
\255\255\255\255\027\001\028\001\029\001\030\001\255\255\032\001\
\255\255\034\001\035\001\036\001\000\001\001\001\002\001\255\255\
\255\255\255\255\006\001\007\001\008\001\009\001\255\255\255\255\
\012\001\255\255\014\001\015\001\016\001\255\255\018\001\255\255\
\020\001\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\032\001\255\255\255\255\035\001\
\036\001\000\001\001\001\002\001\255\255\255\255\255\255\006\001\
\007\001\008\001\009\001\255\255\255\255\012\001\255\255\014\001\
\015\001\016\001\255\255\018\001\255\255\020\001\021\001\255\255\
\255\255\255\255\255\255\003\001\004\001\255\255\255\255\255\255\
\255\255\032\001\255\255\011\001\035\001\036\001\000\001\001\001\
\002\001\255\255\255\255\019\001\255\255\255\255\008\001\009\001\
\255\255\255\255\026\001\013\001\014\001\015\001\016\001\031\001\
\018\001\033\001\020\001\021\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\031\001\032\001\255\255\
\255\255\035\001\036\001\000\001\001\001\002\001\255\255\255\255\
\255\255\006\001\255\255\008\001\009\001\255\255\255\255\006\001\
\255\255\014\001\015\001\016\001\011\001\018\001\255\255\020\001\
\021\001\255\255\017\001\255\255\255\255\255\255\255\255\022\001\
\023\001\024\001\255\255\032\001\255\255\255\255\035\001\036\001\
\000\001\001\001\002\001\255\255\255\255\255\255\006\001\255\255\
\008\001\009\001\255\255\255\255\006\001\255\255\014\001\015\001\
\016\001\011\001\018\001\255\255\020\001\021\001\255\255\017\001\
\255\255\255\255\255\255\255\255\022\001\023\001\024\001\255\255\
\032\001\255\255\255\255\035\001\036\001\000\001\001\001\002\001\
\255\255\255\255\255\255\006\001\255\255\008\001\009\001\255\255\
\255\255\255\255\255\255\014\001\015\001\016\001\255\255\018\001\
\255\255\020\001\021\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\032\001\255\255\255\255\
\035\001\036\001\000\001\001\001\002\001\255\255\255\255\255\255\
\006\001\255\255\008\001\009\001\255\255\255\255\255\255\255\255\
\014\001\015\001\016\001\255\255\018\001\000\001\020\001\255\255\
\255\255\255\255\255\255\255\255\255\255\008\001\009\001\255\255\
\255\255\031\001\032\001\014\001\015\001\035\001\036\001\018\001\
\255\255\020\001\021\001\003\001\004\001\255\255\255\255\007\001\
\255\255\255\255\255\255\011\001\255\255\013\001\255\255\255\255\
\255\255\255\255\255\255\019\001\255\255\255\255\255\255\255\255\
\255\255\255\255\026\001\027\001\028\001\029\001\030\001\031\001\
\255\255\033\001\034\001\003\001\004\001\255\255\255\255\007\001\
\255\255\255\255\255\255\255\255\012\001\013\001\255\255\255\255\
\255\255\255\255\255\255\019\001\255\255\255\255\255\255\255\255\
\255\255\255\255\026\001\027\001\028\001\029\001\030\001\031\001\
\255\255\033\001\034\001\003\001\004\001\255\255\255\255\255\255\
\255\255\255\255\255\255\011\001\255\255\013\001\255\255\255\255\
\255\255\255\255\255\255\019\001\255\255\255\255\255\255\255\255\
\255\255\255\255\026\001\027\001\028\001\029\001\030\001\031\001\
\255\255\033\001\034\001"

let yynames_const = "\
  SUB\000\
  ADD\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  PRINT\000\
  EOF\000\
  COLON\000\
  COMMA\000\
  ASSIGN\000\
  RETURN\000\
  STRUCT\000\
  THIS\000\
  DOT\000\
  IF\000\
  ELSE\000\
  IMPLEMENT\000\
  RIMPLEMENT\000\
  TRAIT\000\
  ARROW\000\
  MEMBER\000\
  LT\000\
  GT\000\
  LE\000\
  GE\000\
  MUL\000\
  AMP\000\
  DIV\000\
  CAST\000\
  NEW\000\
  AT\000\
  "

let yynames_block = "\
  INT\000\
  ID\000\
  INCLUDE\000\
  STRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 44 "parser.mly"
    ( _2 )
# 553 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 46 "parser.mly"
    ( EInt(_1) )
# 560 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 48 "parser.mly"
    ( EString(_1) )
# 567 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 49 "parser.mly"
     ( EVar(_1))
# 574 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 52 "parser.mly"
             ( _1 )
# 581 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 54 "parser.mly"
    ( EBin(_1, "=", _3) )
# 589 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 57 "parser.mly"
    ( EBin(_1, "+", _3) )
# 597 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 59 "parser.mly"
    ( EBin(_1, "-", _3) )
# 605 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 61 "parser.mly"
    ( EBin(_1, "*", _3) )
# 613 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 63 "parser.mly"
    ( EBin(_1, "/", _3) )
# 621 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 65 "parser.mly"
    ( EBin(_1, ".", _3) )
# 629 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 67 "parser.mly"
    ( EBin(_1, "->", _3) )
# 637 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 69 "parser.mly"
    ( EBin(_1, "<", _3) )
# 645 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 71 "parser.mly"
    ( EBin(_1, ">", _3) )
# 653 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 73 "parser.mly"
    ( EBin(_1, "<=", _3) )
# 661 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 75 "parser.mly"
    ( EBin(_1, ">=", _3) )
# 669 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 76 "parser.mly"
          ( EPre("&", _2))
# 676 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 77 "parser.mly"
          ( EPre("*", _2))
# 683 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 78 "parser.mly"
          ( EPre("new", _2))
# 690 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 79 "parser.mly"
         ( EBin(EVar "self", "->", _2))
# 697 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 80 "parser.mly"
               ( ECast(_3, _1))
# 705 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 82 "parser.mly"
    ( ECallM(_3, EBin(_1, "->", EVar _5), []) )
# 714 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'init) in
    Obj.repr(
# 84 "parser.mly"
       ( _1 )
# 721 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 87 "parser.mly"
                   (
    ECall(EVar _1, [])
)
# 730 "parser.ml"
               : 'init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exps) in
    Obj.repr(
# 90 "parser.mly"
                        (
    ECall(EVar _1, _3)
)
# 740 "parser.ml"
               : 'init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exps) in
    Obj.repr(
# 93 "parser.mly"
                              (
    ECall(EVar _1, _3)
)
# 750 "parser.ml"
               : 'init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'init) in
    Obj.repr(
# 99 "parser.mly"
       ([_1])
# 757 "parser.ml"
               : 'inits))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'init) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'inits) in
    Obj.repr(
# 100 "parser.mly"
                   ( _1 :: _3 )
# 765 "parser.ml"
               : 'inits))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 103 "parser.mly"
      ([_1])
# 772 "parser.ml"
               : 'exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exps) in
    Obj.repr(
# 104 "parser.mly"
                 ( _1 :: _3 )
# 780 "parser.ml"
               : 'exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 107 "parser.mly"
       ([_1])
# 787 "parser.ml"
               : Stmt.t list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Stmt.t list) in
    Obj.repr(
# 108 "parser.mly"
             ( _1 :: _2 )
# 795 "parser.ml"
               : Stmt.t list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 111 "parser.mly"
      ( SExp(_1) )
# 802 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'def) in
    Obj.repr(
# 112 "parser.mly"
      ( _1 )
# 809 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 113 "parser.mly"
             ( SRet(_2) )
# 816 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 114 "parser.mly"
         ( SRet EEmpty )
# 822 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 115 "parser.mly"
                ( SBlock [] )
# 828 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Stmt.t list) in
    Obj.repr(
# 116 "parser.mly"
                      ( SBlock _2 )
# 835 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 117 "parser.mly"
                            ( SIf(_3, _5, SEmpty))
# 843 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 118 "parser.mly"
                                      ( SIf(_3, _5, _7))
# 852 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'def) in
    Obj.repr(
# 121 "parser.mly"
      ([_1])
# 859 "parser.ml"
               : 'defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'def) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'defs) in
    Obj.repr(
# 122 "parser.mly"
           ( _1 :: _2 )
# 867 "parser.ml"
               : 'defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 125 "parser.mly"
          ( SInclude(_1) )
# 874 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 126 "parser.mly"
                                       (
    SFun(Ty _5, _1, [], SBlock [_7])
)
# 885 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'prms) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 129 "parser.mly"
                                            (
    SFun(Ty _6, _1, _3, SBlock [_8])
)
# 897 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'exps) in
    Obj.repr(
# 132 "parser.mly"
                                 ( SLet(Ty _3, ECall(EVar _1, _5), EEmpty) )
# 906 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 133 "parser.mly"
              ( SLet(Ty _3, EVar _1, EEmpty) )
# 914 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 134 "parser.mly"
                          ( SLet(_3, EVar _1, _5) )
# 923 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    Obj.repr(
# 135 "parser.mly"
                          ( SStruct(_1, "", []) )
# 930 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'str_mems) in
    Obj.repr(
# 136 "parser.mly"
                                   ( SStruct(_1, "", _4) )
# 938 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    Obj.repr(
# 137 "parser.mly"
                          (
        SStruct(_1, "",[(Ty "", SCon([],[],SBlock []))])
    )
# 947 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'prms) in
    Obj.repr(
# 140 "parser.mly"
                               (
    let mems = List.map begin fun (ty,id) ->
        (ty, SExp(EVar id))
    end _4 in
    let inits = List.map begin fun (ty,id) ->
        ECall(EVar id, [EVar id])
    end _4 in
    SStruct(_1, "",(Ty "", SCon(_4,inits,SBlock []))::mems)
)
# 963 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 149 "parser.mly"
                                 (
        SStruct(_3, _1,[(Ty "", SCon([],[],SBlock []))])
    )
# 973 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'prms) in
    Obj.repr(
# 152 "parser.mly"
                                      (
    let mems = List.map begin fun (ty,id) ->
        (ty, SExp(EVar id))
    end _5 in
    let inits = List.map begin fun (ty,id) ->
        ECall(EVar id, [EVar id])
    end _5 in
    SStruct(_3, _1,(Ty "", SCon(_5,inits,SBlock []))::mems)
)
# 990 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'str_mems) in
    Obj.repr(
# 162 "parser.mly"
                                  ( STrait(_1, _4) )
# 998 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'defs) in
    Obj.repr(
# 163 "parser.mly"
                                     ( SImpl(_3, _1, _5) )
# 1007 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'defs) in
    Obj.repr(
# 164 "parser.mly"
                                      ( SImpl(_1, _3, _5) )
# 1016 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 167 "parser.mly"
               ( [_3, _1] )
# 1024 "parser.ml"
               : 'prms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'prms) in
    Obj.repr(
# 168 "parser.mly"
                          ( (_3, _1)::_5 )
# 1033 "parser.ml"
               : 'prms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'str_mem) in
    Obj.repr(
# 171 "parser.mly"
          ( [_1] )
# 1040 "parser.ml"
               : 'str_mems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'str_mem) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'str_mems) in
    Obj.repr(
# 172 "parser.mly"
                   ( _1::_2 )
# 1048 "parser.ml"
               : 'str_mems))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 175 "parser.mly"
          ( TPtr _2 )
# 1055 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 176 "parser.mly"
     ( Ty _1 )
# 1062 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 177 "parser.mly"
                         ( TFun(Ty _4, []) )
# 1069 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 180 "parser.mly"
      ( [_1])
# 1076 "parser.ml"
               : 'typs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typs) in
    Obj.repr(
# 181 "parser.mly"
                 ( _1 :: _3 )
# 1084 "parser.ml"
               : 'typs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typs) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 184 "parser.mly"
                                       ( (TFun(Ty _7, _4), SExp(EVar _1)) )
# 1093 "parser.ml"
               : 'str_mem))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 185 "parser.mly"
                                  ( (TFun(Ty _6, []), SExp(EVar _1)) )
# 1101 "parser.ml"
               : 'str_mem))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 186 "parser.mly"
               ( (_3, SExp(EVar _1)) )
# 1109 "parser.ml"
               : 'str_mem))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'prms) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'inits) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 187 "parser.mly"
                                                  ( (Ty "", SCon(_3,_6,SBlock [_8])) )
# 1118 "parser.ml"
               : 'str_mem))
; (fun __caml_parser_env ->
    Obj.repr(
# 190 "parser.mly"
    ( failwith
      (Printf.sprintf "parse error near characters %d-%d"
        (Parsing.symbol_start ())
        (Parsing.symbol_end ())) )
# 1127 "parser.ml"
               : 'str_mem))
(* Entry stmts *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let stmts (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Stmt.t list)
